{"ast":null,"code":"// AdminServices.js\n// This file contains all the admin data services for the dashboard\n\nimport { toast } from 'react-toastify';\n\n// ==================== CONTENT SERVICE (Backend API) ====================\nimport contentService from '../../services/contentService';\nexport const ContentService = {\n  getAllContent: async filters => await contentService.getAllContent(filters),\n  getContentBySlug: async slug => await contentService.getContentBySlug(slug),\n  createContent: async (contentData, token) => await contentService.createContent(contentData, token),\n  updateContent: async (id, contentData, token) => await contentService.updateContent(id, contentData, token),\n  deleteContent: async (id, token) => await contentService.deleteContent(id, token),\n  updateContentSection: async (id, sectionName, sectionData, token) => await contentService.updateContentSection(id, sectionName, sectionData, token),\n  addSectionItem: async (id, sectionName, itemData, token) => await contentService.addSectionItem(id, sectionName, itemData, token)\n};\n// Initialize with some data if empty\nif (servicesDatabase.length === 0) {\n  servicesDatabase = [{\n    _id: 'service-1',\n    title: 'University Admissions',\n    description: 'We help students navigate the complex university application process and secure admissions to top institutions worldwide.',\n    icon: 'graduation-cap',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'service-2',\n    title: 'Visa Assistance',\n    description: 'Our expert team provides comprehensive support for student visa applications, ensuring a smooth process.',\n    icon: 'passport',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'service-3',\n    title: 'Career Counseling',\n    description: 'Personalized guidance to help students choose the right career path based on their interests and strengths.',\n    icon: 'briefcase',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveServicesDatabase();\n}\n\n// Services Service\nconst ServicesService = {\n  // Get all services\n  getAllServices: async () => {\n    return servicesDatabase;\n  },\n  // Get service by id\n  getServiceById: async id => {\n    const service = servicesDatabase.find(item => item._id === id);\n    if (!service) {\n      throw new Error('Service not found');\n    }\n    return service;\n  },\n  // Create service\n  createService: async serviceData => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    servicesDatabase.push(newService);\n    saveServicesDatabase();\n    toast.success('Service created successfully');\n    return newService;\n  },\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    const updatedService = {\n      ...servicesDatabase[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    servicesDatabase[index] = updatedService;\n    saveServicesDatabase();\n    toast.success('Service updated successfully');\n    return updatedService;\n  },\n  // Delete service\n  deleteService: async id => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    servicesDatabase.splice(index, 1);\n    saveServicesDatabase();\n    toast.success('Service deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== TESTIMONIALS SERVICE ====================\n// Mock database for storing testimonials\nlet testimonialsDatabase = JSON.parse(localStorage.getItem('testimonialsDatabase')) || [];\n\n// Save the testimonials database to localStorage\nconst saveTestimonialsDatabase = () => {\n  localStorage.setItem('testimonialsDatabase', JSON.stringify(testimonialsDatabase));\n};\n\n// Initialize with some data if empty\nif (testimonialsDatabase.length === 0) {\n  testimonialsDatabase = [{\n    _id: 'testimonial-1',\n    name: 'John Smith',\n    university: 'Harvard University',\n    text: 'GradWay helped me get into my dream university. Their guidance throughout the application process was invaluable.',\n    image: 'https://randomuser.me/api/portraits/men/32.jpg',\n    rating: 5,\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'testimonial-2',\n    name: 'Sarah Johnson',\n    university: 'Oxford University',\n    text: \"I couldn't have navigated the complex visa process without GradWay's expert assistance. Highly recommended!\",\n    image: 'https://randomuser.me/api/portraits/women/44.jpg',\n    rating: 5,\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveTestimonialsDatabase();\n}\n\n// Testimonials Service\nconst TestimonialsService = {\n  // Get all testimonials\n  getAllTestimonials: async () => {\n    return testimonialsDatabase;\n  },\n  // Get testimonial by id\n  getTestimonialById: async id => {\n    const testimonial = testimonialsDatabase.find(item => item._id === id);\n    if (!testimonial) {\n      throw new Error('Testimonial not found');\n    }\n    return testimonial;\n  },\n  // Create testimonial\n  createTestimonial: async testimonialData => {\n    const newTestimonial = {\n      _id: 'testimonial-' + Date.now(),\n      ...testimonialData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    testimonialsDatabase.push(newTestimonial);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial created successfully');\n    return newTestimonial;\n  },\n  // Update testimonial\n  updateTestimonial: async (id, testimonialData) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    const updatedTestimonial = {\n      ...testimonialsDatabase[index],\n      ...testimonialData,\n      updatedAt: new Date().toISOString()\n    };\n    testimonialsDatabase[index] = updatedTestimonial;\n    saveTestimonialsDatabase();\n    toast.success('Testimonial updated successfully');\n    return updatedTestimonial;\n  },\n  // Delete testimonial\n  deleteTestimonial: async id => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    testimonialsDatabase.splice(index, 1);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== HERO SERVICE ====================\n// Mock database for storing hero sections\nlet heroDatabase = JSON.parse(localStorage.getItem('heroDatabase')) || null;\n\n// Save the hero database to localStorage\nconst saveHeroDatabase = () => {\n  localStorage.setItem('heroDatabase', JSON.stringify(heroDatabase));\n};\n\n// Initialize with some data if empty\nif (!heroDatabase) {\n  heroDatabase = {\n    _id: 'hero-1',\n    title: 'Your Path to Academic Success',\n    subtitle: 'Expert guidance for international education',\n    description: 'We help students achieve their academic dreams through personalized guidance and support.',\n    buttonText: 'Get Started',\n    buttonLink: '/contact',\n    backgroundImage: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveHeroDatabase();\n}\n\n// Hero Service\nconst HeroService = {\n  // Get hero section\n  getHero: async () => {\n    return heroDatabase;\n  },\n  // Update hero section\n  updateHero: async heroData => {\n    heroDatabase = {\n      ...heroDatabase,\n      ...heroData,\n      updatedAt: new Date().toISOString()\n    };\n    saveHeroDatabase();\n    toast.success('Hero section updated successfully');\n    return heroDatabase;\n  }\n};","map":{"version":3,"names":["toast","contentService","ContentService","getAllContent","filters","getContentBySlug","slug","createContent","contentData","token","updateContent","id","deleteContent","updateContentSection","sectionName","sectionData","addSectionItem","itemData","servicesDatabase","length","_id","title","description","icon","featured","createdAt","Date","toISOString","updatedAt","saveServicesDatabase","ServicesService","getAllServices","getServiceById","service","find","item","Error","createService","serviceData","newService","now","push","success","updateService","index","findIndex","updatedService","deleteService","splice","testimonialsDatabase","JSON","parse","localStorage","getItem","saveTestimonialsDatabase","setItem","stringify","name","university","text","image","rating","TestimonialsService","getAllTestimonials","getTestimonialById","testimonial","createTestimonial","testimonialData","newTestimonial","updateTestimonial","updatedTestimonial","deleteTestimonial","heroDatabase","saveHeroDatabase","subtitle","buttonText","buttonLink","backgroundImage","HeroService","getHero","updateHero","heroData"],"sources":["X:/gradway/frontend/src/pages/admin/AdminServices.js"],"sourcesContent":["// AdminServices.js\n// This file contains all the admin data services for the dashboard\n\nimport { toast } from 'react-toastify';\n\n// ==================== CONTENT SERVICE (Backend API) ====================\nimport contentService from '../../services/contentService';\n\nexport const ContentService = {\n  getAllContent: async (filters) => await contentService.getAllContent(filters),\n  getContentBySlug: async (slug) => await contentService.getContentBySlug(slug),\n  createContent: async (contentData, token) => await contentService.createContent(contentData, token),\n  updateContent: async (id, contentData, token) => await contentService.updateContent(id, contentData, token),\n  deleteContent: async (id, token) => await contentService.deleteContent(id, token),\n  updateContentSection: async (id, sectionName, sectionData, token) => await contentService.updateContentSection(id, sectionName, sectionData, token),\n  addSectionItem: async (id, sectionName, itemData, token) => await contentService.addSectionItem(id, sectionName, itemData, token),\n};\n// Initialize with some data if empty\nif (servicesDatabase.length === 0) {\n  servicesDatabase = [\n    {\n      _id: 'service-1',\n      title: 'University Admissions',\n      description: 'We help students navigate the complex university application process and secure admissions to top institutions worldwide.',\n      icon: 'graduation-cap',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'service-2',\n      title: 'Visa Assistance',\n      description: 'Our expert team provides comprehensive support for student visa applications, ensuring a smooth process.',\n      icon: 'passport',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'service-3',\n      title: 'Career Counseling',\n      description: 'Personalized guidance to help students choose the right career path based on their interests and strengths.',\n      icon: 'briefcase',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveServicesDatabase();\n}\n\n// Services Service\nconst ServicesService = {\n  // Get all services\n  getAllServices: async () => {\n    return servicesDatabase;\n  },\n\n  // Get service by id\n  getServiceById: async (id) => {\n    const service = servicesDatabase.find(item => item._id === id);\n    if (!service) {\n      throw new Error('Service not found');\n    }\n    return service;\n  },\n\n  // Create service\n  createService: async (serviceData) => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesDatabase.push(newService);\n    saveServicesDatabase();\n    toast.success('Service created successfully');\n    return newService;\n  },\n\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    \n    const updatedService = {\n      ...servicesDatabase[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesDatabase[index] = updatedService;\n    saveServicesDatabase();\n    toast.success('Service updated successfully');\n    return updatedService;\n  },\n\n  // Delete service\n  deleteService: async (id) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    \n    servicesDatabase.splice(index, 1);\n    saveServicesDatabase();\n    toast.success('Service deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== TESTIMONIALS SERVICE ====================\n// Mock database for storing testimonials\nlet testimonialsDatabase = JSON.parse(localStorage.getItem('testimonialsDatabase')) || [];\n\n// Save the testimonials database to localStorage\nconst saveTestimonialsDatabase = () => {\n  localStorage.setItem('testimonialsDatabase', JSON.stringify(testimonialsDatabase));\n};\n\n// Initialize with some data if empty\nif (testimonialsDatabase.length === 0) {\n  testimonialsDatabase = [\n    {\n      _id: 'testimonial-1',\n      name: 'John Smith',\n      university: 'Harvard University',\n      text: 'GradWay helped me get into my dream university. Their guidance throughout the application process was invaluable.',\n      image: 'https://randomuser.me/api/portraits/men/32.jpg',\n      rating: 5,\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'testimonial-2',\n      name: 'Sarah Johnson',\n      university: 'Oxford University',\n      text: \"I couldn't have navigated the complex visa process without GradWay's expert assistance. Highly recommended!\",\n      image: 'https://randomuser.me/api/portraits/women/44.jpg',\n      rating: 5,\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveTestimonialsDatabase();\n}\n\n// Testimonials Service\nconst TestimonialsService = {\n  // Get all testimonials\n  getAllTestimonials: async () => {\n    return testimonialsDatabase;\n  },\n\n  // Get testimonial by id\n  getTestimonialById: async (id) => {\n    const testimonial = testimonialsDatabase.find(item => item._id === id);\n    if (!testimonial) {\n      throw new Error('Testimonial not found');\n    }\n    return testimonial;\n  },\n\n  // Create testimonial\n  createTestimonial: async (testimonialData) => {\n    const newTestimonial = {\n      _id: 'testimonial-' + Date.now(),\n      ...testimonialData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    testimonialsDatabase.push(newTestimonial);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial created successfully');\n    return newTestimonial;\n  },\n\n  // Update testimonial\n  updateTestimonial: async (id, testimonialData) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    \n    const updatedTestimonial = {\n      ...testimonialsDatabase[index],\n      ...testimonialData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    testimonialsDatabase[index] = updatedTestimonial;\n    saveTestimonialsDatabase();\n    toast.success('Testimonial updated successfully');\n    return updatedTestimonial;\n  },\n\n  // Delete testimonial\n  deleteTestimonial: async (id) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    \n    testimonialsDatabase.splice(index, 1);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== HERO SERVICE ====================\n// Mock database for storing hero sections\nlet heroDatabase = JSON.parse(localStorage.getItem('heroDatabase')) || null;\n\n// Save the hero database to localStorage\nconst saveHeroDatabase = () => {\n  localStorage.setItem('heroDatabase', JSON.stringify(heroDatabase));\n};\n\n// Initialize with some data if empty\nif (!heroDatabase) {\n  heroDatabase = {\n    _id: 'hero-1',\n    title: 'Your Path to Academic Success',\n    subtitle: 'Expert guidance for international education',\n    description: 'We help students achieve their academic dreams through personalized guidance and support.',\n    buttonText: 'Get Started',\n    buttonLink: '/contact',\n    backgroundImage: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveHeroDatabase();\n}\n\n// Hero Service\nconst HeroService = {\n  // Get hero section\n  getHero: async () => {\n    return heroDatabase;\n  },\n\n  // Update hero section\n  updateHero: async (heroData) => {\n    heroDatabase = {\n      ...heroDatabase,\n      ...heroData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveHeroDatabase();\n    toast.success('Hero section updated successfully');\n    return heroDatabase;\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}