{"ast":null,"code":"// AdminServices.js\n// This file contains all the admin data services for the dashboard\n\nimport { toast } from 'react-toastify';\n\n// ==================== CONTENT SERVICE ====================\n// Mock database for storing content\nlet contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n\n// Save the content database to localStorage\nconst saveContentDatabase = () => {\n  localStorage.setItem('contentDatabase', JSON.stringify(contentDatabase));\n};\n\n// Initialize with some data if empty\nif (contentDatabase.length === 0) {\n  contentDatabase = [{\n    _id: 'home-page-' + Date.now(),\n    slug: 'home',\n    page: 'home',\n    title: 'Welcome to GradWay',\n    description: 'Your path to academic success',\n    template: 'default',\n    status: 'published',\n    isActive: true,\n    sections: [{\n      name: 'hero',\n      title: 'Hero Section',\n      order: 0,\n      fields: [{\n        name: 'title',\n        type: 'text',\n        value: 'Your Path to Academic Success',\n        label: 'Title'\n      }, {\n        name: 'subtitle',\n        type: 'text',\n        value: 'Expert guidance for international education',\n        label: 'Subtitle'\n      }, {\n        name: 'description',\n        type: 'text',\n        value: 'We help students achieve their academic dreams through personalized guidance and support.',\n        label: 'Description'\n      }]\n    }],\n    meta: {\n      description: 'GradWay - Your path to academic success',\n      keywords: ['education', 'university', 'admissions']\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveContentDatabase();\n}\n\n// Content Service\nconst ContentService = {\n  // Get all content\n  getAllContent: async () => {\n    return contentDatabase;\n  },\n  // Get content by slug\n  getContentBySlug: async slug => {\n    const content = contentDatabase.find(item => item.slug === slug);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    return content;\n  },\n  // Create content\n  createContent: async contentData => {\n    const newContent = {\n      _id: 'content-' + Date.now(),\n      ...contentData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    contentDatabase.push(newContent);\n    saveContentDatabase();\n    toast.success('Content created successfully');\n    return newContent;\n  },\n  // Update content\n  updateContent: async (id, contentData) => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    const updatedContent = {\n      ...contentDatabase[index],\n      ...contentData,\n      updatedAt: new Date().toISOString()\n    };\n    contentDatabase[index] = updatedContent;\n    saveContentDatabase();\n    toast.success('Content updated successfully');\n    return updatedContent;\n  },\n  // Delete content\n  deleteContent: async id => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    contentDatabase.splice(index, 1);\n    saveContentDatabase();\n    toast.success('Content deleted successfully');\n    return {\n      success: true\n    };\n  },\n  // Update content section\n  updateContentSection: async (id, sectionName, sectionData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    content.sections[sectionIndex] = {\n      ...content.sections[sectionIndex],\n      ...sectionData\n    };\n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Section updated successfully');\n    return content;\n  },\n  // Add section item\n  addSectionItem: async (id, sectionName, itemData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    const section = content.sections[sectionIndex];\n    if (!section.isRepeatable) {\n      throw new Error('This section does not support multiple items');\n    }\n    const newItem = {\n      ...itemData,\n      order: section.items ? section.items.length : 0\n    };\n    if (!section.items) {\n      section.items = [];\n    }\n    section.items.push(newItem);\n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Item added successfully');\n    return content;\n  }\n};\n\n// ==================== COURSES SERVICE ====================\n// Mock database for storing courses\nlet coursesDatabase = JSON.parse(localStorage.getItem('coursesDatabase')) || [];\n\n// Save the courses database to localStorage\nconst saveCoursesDatabase = () => {\n  localStorage.setItem('coursesDatabase', JSON.stringify(coursesDatabase));\n};\n\n// Initialize with some data if empty\nif (coursesDatabase.length === 0) {\n  coursesDatabase = [{\n    _id: 'course-1',\n    title: 'Bachelor of Computer Science',\n    university: 'University of Technology',\n    description: 'A comprehensive program covering programming, algorithms, and software engineering.',\n    duration: '4 years',\n    tuitionFee: '$20,000 per year',\n    requirements: 'High school diploma with strong math scores',\n    image: 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'course-2',\n    title: 'Master of Business Administration',\n    university: 'Global Business School',\n    description: 'Advanced business education focusing on leadership, strategy, and management.',\n    duration: '2 years',\n    tuitionFee: '$30,000 per year',\n    requirements: 'Bachelor degree with 2+ years work experience',\n    image: 'https://images.unsplash.com/photo-1454165804606-c3d57bc86b40',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveCoursesDatabase();\n}\n\n// Courses Service\nconst CoursesService = {\n  // Get all courses\n  getAllCourses: async () => {\n    return coursesDatabase;\n  },\n  // Get course by id\n  getCourseById: async id => {\n    const course = coursesDatabase.find(item => item._id === id);\n    if (!course) {\n      throw new Error('Course not found');\n    }\n    return course;\n  },\n  // Create course\n  createCourse: async courseData => {\n    const newCourse = {\n      _id: 'course-' + Date.now(),\n      ...courseData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    coursesDatabase.push(newCourse);\n    saveCoursesDatabase();\n    toast.success('Course created successfully');\n    return newCourse;\n  },\n  // Update course\n  updateCourse: async (id, courseData) => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    const updatedCourse = {\n      ...coursesDatabase[index],\n      ...courseData,\n      updatedAt: new Date().toISOString()\n    };\n    coursesDatabase[index] = updatedCourse;\n    saveCoursesDatabase();\n    toast.success('Course updated successfully');\n    return updatedCourse;\n  },\n  // Delete course\n  deleteCourse: async id => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    coursesDatabase.splice(index, 1);\n    saveCoursesDatabase();\n    toast.success('Course deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== SERVICES SERVICE ====================\n// Mock database for storing services\nlet servicesDatabase = JSON.parse(localStorage.getItem('servicesDatabase')) || [];\n\n// Save the services database to localStorage\nconst saveServicesDatabase = () => {\n  localStorage.setItem('servicesDatabase', JSON.stringify(servicesDatabase));\n};\n\n// Initialize with some data if empty\nif (servicesDatabase.length === 0) {\n  servicesDatabase = [{\n    _id: 'service-1',\n    title: 'University Admissions',\n    description: 'We help students navigate the complex university application process and secure admissions to top institutions worldwide.',\n    icon: 'graduation-cap',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'service-2',\n    title: 'Visa Assistance',\n    description: 'Our expert team provides comprehensive support for student visa applications, ensuring a smooth process.',\n    icon: 'passport',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'service-3',\n    title: 'Career Counseling',\n    description: 'Personalized guidance to help students choose the right career path based on their interests and strengths.',\n    icon: 'briefcase',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveServicesDatabase();\n}\n\n// Services Service\nconst ServicesService = {\n  // Get all services\n  getAllServices: async () => {\n    return servicesDatabase;\n  },\n  // Get service by id\n  getServiceById: async id => {\n    const service = servicesDatabase.find(item => item._id === id);\n    if (!service) {\n      throw new Error('Service not found');\n    }\n    return service;\n  },\n  // Create service\n  createService: async serviceData => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    servicesDatabase.push(newService);\n    saveServicesDatabase();\n    toast.success('Service created successfully');\n    return newService;\n  },\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    const updatedService = {\n      ...servicesDatabase[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    servicesDatabase[index] = updatedService;\n    saveServicesDatabase();\n    toast.success('Service updated successfully');\n    return updatedService;\n  },\n  // Delete service\n  deleteService: async id => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    servicesDatabase.splice(index, 1);\n    saveServicesDatabase();\n    toast.success('Service deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== TESTIMONIALS SERVICE ====================\n// Mock database for storing testimonials\nlet testimonialsDatabase = JSON.parse(localStorage.getItem('testimonialsDatabase')) || [];\n\n// Save the testimonials database to localStorage\nconst saveTestimonialsDatabase = () => {\n  localStorage.setItem('testimonialsDatabase', JSON.stringify(testimonialsDatabase));\n};\n\n// Initialize with some data if empty\nif (testimonialsDatabase.length === 0) {\n  testimonialsDatabase = [{\n    _id: 'testimonial-1',\n    name: 'John Smith',\n    university: 'Harvard University',\n    text: 'GradWay helped me get into my dream university. Their guidance throughout the application process was invaluable.',\n    image: 'https://randomuser.me/api/portraits/men/32.jpg',\n    rating: 5,\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'testimonial-2',\n    name: 'Sarah Johnson',\n    university: 'Oxford University',\n    text: \"I couldn't have navigated the complex visa process without GradWay's expert assistance. Highly recommended!\",\n    image: 'https://randomuser.me/api/portraits/women/44.jpg',\n    rating: 5,\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveTestimonialsDatabase();\n}\n\n// Testimonials Service\nconst TestimonialsService = {\n  // Get all testimonials\n  getAllTestimonials: async () => {\n    return testimonialsDatabase;\n  },\n  // Get testimonial by id\n  getTestimonialById: async id => {\n    const testimonial = testimonialsDatabase.find(item => item._id === id);\n    if (!testimonial) {\n      throw new Error('Testimonial not found');\n    }\n    return testimonial;\n  },\n  // Create testimonial\n  createTestimonial: async testimonialData => {\n    const newTestimonial = {\n      _id: 'testimonial-' + Date.now(),\n      ...testimonialData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    testimonialsDatabase.push(newTestimonial);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial created successfully');\n    return newTestimonial;\n  },\n  // Update testimonial\n  updateTestimonial: async (id, testimonialData) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    const updatedTestimonial = {\n      ...testimonialsDatabase[index],\n      ...testimonialData,\n      updatedAt: new Date().toISOString()\n    };\n    testimonialsDatabase[index] = updatedTestimonial;\n    saveTestimonialsDatabase();\n    toast.success('Testimonial updated successfully');\n    return updatedTestimonial;\n  },\n  // Delete testimonial\n  deleteTestimonial: async id => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    testimonialsDatabase.splice(index, 1);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== HERO SERVICE ====================\n// Mock database for storing hero sections\nlet heroDatabase = JSON.parse(localStorage.getItem('heroDatabase')) || null;\n\n// Save the hero database to localStorage\nconst saveHeroDatabase = () => {\n  localStorage.setItem('heroDatabase', JSON.stringify(heroDatabase));\n};\n\n// Initialize with some data if empty\nif (!heroDatabase) {\n  heroDatabase = {\n    _id: 'hero-1',\n    title: 'Your Path to Academic Success',\n    subtitle: 'Expert guidance for international education',\n    description: 'We help students achieve their academic dreams through personalized guidance and support.',\n    buttonText: 'Get Started',\n    buttonLink: '/contact',\n    backgroundImage: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveHeroDatabase();\n}\n\n// Hero Service\nconst HeroService = {\n  // Get hero section\n  getHero: async () => {\n    return heroDatabase;\n  },\n  // Update hero section\n  updateHero: async heroData => {\n    heroDatabase = {\n      ...heroDatabase,\n      ...heroData,\n      updatedAt: new Date().toISOString()\n    };\n    saveHeroDatabase();\n    toast.success('Hero section updated successfully');\n    return heroDatabase;\n  }\n};\n\n// Export all services\nexport { ContentService, CoursesService, ServicesService, TestimonialsService, HeroService };","map":{"version":3,"names":["toast","contentDatabase","JSON","parse","localStorage","getItem","saveContentDatabase","setItem","stringify","length","_id","Date","now","slug","page","title","description","template","status","isActive","sections","name","order","fields","type","value","label","meta","keywords","createdAt","toISOString","updatedAt","ContentService","getAllContent","getContentBySlug","content","find","item","Error","createContent","contentData","newContent","push","success","updateContent","id","index","findIndex","updatedContent","deleteContent","splice","updateContentSection","sectionName","sectionData","sectionIndex","section","addSectionItem","itemData","isRepeatable","newItem","items","coursesDatabase","saveCoursesDatabase","university","duration","tuitionFee","requirements","image","featured","CoursesService","getAllCourses","getCourseById","course","createCourse","courseData","newCourse","updateCourse","updatedCourse","deleteCourse","servicesDatabase","saveServicesDatabase","icon","ServicesService","getAllServices","getServiceById","service","createService","serviceData","newService","updateService","updatedService","deleteService","testimonialsDatabase","saveTestimonialsDatabase","text","rating","TestimonialsService","getAllTestimonials","getTestimonialById","testimonial","createTestimonial","testimonialData","newTestimonial","updateTestimonial","updatedTestimonial","deleteTestimonial","heroDatabase","saveHeroDatabase","subtitle","buttonText","buttonLink","backgroundImage","HeroService","getHero","updateHero","heroData"],"sources":["X:/gradway/frontend/src/pages/admin/AdminServices.js"],"sourcesContent":["// AdminServices.js\n// This file contains all the admin data services for the dashboard\n\nimport { toast } from 'react-toastify';\n\n// ==================== CONTENT SERVICE ====================\n// Mock database for storing content\nlet contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n\n// Save the content database to localStorage\nconst saveContentDatabase = () => {\n  localStorage.setItem('contentDatabase', JSON.stringify(contentDatabase));\n};\n\n// Initialize with some data if empty\nif (contentDatabase.length === 0) {\n  contentDatabase = [\n    {\n      _id: 'home-page-' + Date.now(),\n      slug: 'home',\n      page: 'home',\n      title: 'Welcome to GradWay',\n      description: 'Your path to academic success',\n      template: 'default',\n      status: 'published',\n      isActive: true,\n      sections: [\n        {\n          name: 'hero',\n          title: 'Hero Section',\n          order: 0,\n          fields: [\n            {\n              name: 'title',\n              type: 'text',\n              value: 'Your Path to Academic Success',\n              label: 'Title'\n            },\n            {\n              name: 'subtitle',\n              type: 'text',\n              value: 'Expert guidance for international education',\n              label: 'Subtitle'\n            },\n            {\n              name: 'description',\n              type: 'text',\n              value: 'We help students achieve their academic dreams through personalized guidance and support.',\n              label: 'Description'\n            }\n          ]\n        }\n      ],\n      meta: {\n        description: 'GradWay - Your path to academic success',\n        keywords: ['education', 'university', 'admissions']\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveContentDatabase();\n}\n\n// Content Service\nconst ContentService = {\n  // Get all content\n  getAllContent: async () => {\n    return contentDatabase;\n  },\n\n  // Get content by slug\n  getContentBySlug: async (slug) => {\n    const content = contentDatabase.find(item => item.slug === slug);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    return content;\n  },\n\n  // Create content\n  createContent: async (contentData) => {\n    const newContent = {\n      _id: 'content-' + Date.now(),\n      ...contentData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    contentDatabase.push(newContent);\n    saveContentDatabase();\n    toast.success('Content created successfully');\n    return newContent;\n  },\n\n  // Update content\n  updateContent: async (id, contentData) => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    \n    const updatedContent = {\n      ...contentDatabase[index],\n      ...contentData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    contentDatabase[index] = updatedContent;\n    saveContentDatabase();\n    toast.success('Content updated successfully');\n    return updatedContent;\n  },\n\n  // Delete content\n  deleteContent: async (id) => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    \n    contentDatabase.splice(index, 1);\n    saveContentDatabase();\n    toast.success('Content deleted successfully');\n    return { success: true };\n  },\n\n  // Update content section\n  updateContentSection: async (id, sectionName, sectionData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    \n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    \n    content.sections[sectionIndex] = {\n      ...content.sections[sectionIndex],\n      ...sectionData\n    };\n    \n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Section updated successfully');\n    return content;\n  },\n\n  // Add section item\n  addSectionItem: async (id, sectionName, itemData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    \n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    \n    const section = content.sections[sectionIndex];\n    if (!section.isRepeatable) {\n      throw new Error('This section does not support multiple items');\n    }\n    \n    const newItem = {\n      ...itemData,\n      order: section.items ? section.items.length : 0\n    };\n    \n    if (!section.items) {\n      section.items = [];\n    }\n    \n    section.items.push(newItem);\n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Item added successfully');\n    return content;\n  }\n};\n\n// ==================== COURSES SERVICE ====================\n// Mock database for storing courses\nlet coursesDatabase = JSON.parse(localStorage.getItem('coursesDatabase')) || [];\n\n// Save the courses database to localStorage\nconst saveCoursesDatabase = () => {\n  localStorage.setItem('coursesDatabase', JSON.stringify(coursesDatabase));\n};\n\n// Initialize with some data if empty\nif (coursesDatabase.length === 0) {\n  coursesDatabase = [\n    {\n      _id: 'course-1',\n      title: 'Bachelor of Computer Science',\n      university: 'University of Technology',\n      description: 'A comprehensive program covering programming, algorithms, and software engineering.',\n      duration: '4 years',\n      tuitionFee: '$20,000 per year',\n      requirements: 'High school diploma with strong math scores',\n      image: 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'course-2',\n      title: 'Master of Business Administration',\n      university: 'Global Business School',\n      description: 'Advanced business education focusing on leadership, strategy, and management.',\n      duration: '2 years',\n      tuitionFee: '$30,000 per year',\n      requirements: 'Bachelor degree with 2+ years work experience',\n      image: 'https://images.unsplash.com/photo-1454165804606-c3d57bc86b40',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveCoursesDatabase();\n}\n\n// Courses Service\nconst CoursesService = {\n  // Get all courses\n  getAllCourses: async () => {\n    return coursesDatabase;\n  },\n\n  // Get course by id\n  getCourseById: async (id) => {\n    const course = coursesDatabase.find(item => item._id === id);\n    if (!course) {\n      throw new Error('Course not found');\n    }\n    return course;\n  },\n\n  // Create course\n  createCourse: async (courseData) => {\n    const newCourse = {\n      _id: 'course-' + Date.now(),\n      ...courseData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    coursesDatabase.push(newCourse);\n    saveCoursesDatabase();\n    toast.success('Course created successfully');\n    return newCourse;\n  },\n\n  // Update course\n  updateCourse: async (id, courseData) => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    \n    const updatedCourse = {\n      ...coursesDatabase[index],\n      ...courseData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    coursesDatabase[index] = updatedCourse;\n    saveCoursesDatabase();\n    toast.success('Course updated successfully');\n    return updatedCourse;\n  },\n\n  // Delete course\n  deleteCourse: async (id) => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    \n    coursesDatabase.splice(index, 1);\n    saveCoursesDatabase();\n    toast.success('Course deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== SERVICES SERVICE ====================\n// Mock database for storing services\nlet servicesDatabase = JSON.parse(localStorage.getItem('servicesDatabase')) || [];\n\n// Save the services database to localStorage\nconst saveServicesDatabase = () => {\n  localStorage.setItem('servicesDatabase', JSON.stringify(servicesDatabase));\n};\n\n// Initialize with some data if empty\nif (servicesDatabase.length === 0) {\n  servicesDatabase = [\n    {\n      _id: 'service-1',\n      title: 'University Admissions',\n      description: 'We help students navigate the complex university application process and secure admissions to top institutions worldwide.',\n      icon: 'graduation-cap',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'service-2',\n      title: 'Visa Assistance',\n      description: 'Our expert team provides comprehensive support for student visa applications, ensuring a smooth process.',\n      icon: 'passport',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'service-3',\n      title: 'Career Counseling',\n      description: 'Personalized guidance to help students choose the right career path based on their interests and strengths.',\n      icon: 'briefcase',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveServicesDatabase();\n}\n\n// Services Service\nconst ServicesService = {\n  // Get all services\n  getAllServices: async () => {\n    return servicesDatabase;\n  },\n\n  // Get service by id\n  getServiceById: async (id) => {\n    const service = servicesDatabase.find(item => item._id === id);\n    if (!service) {\n      throw new Error('Service not found');\n    }\n    return service;\n  },\n\n  // Create service\n  createService: async (serviceData) => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesDatabase.push(newService);\n    saveServicesDatabase();\n    toast.success('Service created successfully');\n    return newService;\n  },\n\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    \n    const updatedService = {\n      ...servicesDatabase[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesDatabase[index] = updatedService;\n    saveServicesDatabase();\n    toast.success('Service updated successfully');\n    return updatedService;\n  },\n\n  // Delete service\n  deleteService: async (id) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    \n    servicesDatabase.splice(index, 1);\n    saveServicesDatabase();\n    toast.success('Service deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== TESTIMONIALS SERVICE ====================\n// Mock database for storing testimonials\nlet testimonialsDatabase = JSON.parse(localStorage.getItem('testimonialsDatabase')) || [];\n\n// Save the testimonials database to localStorage\nconst saveTestimonialsDatabase = () => {\n  localStorage.setItem('testimonialsDatabase', JSON.stringify(testimonialsDatabase));\n};\n\n// Initialize with some data if empty\nif (testimonialsDatabase.length === 0) {\n  testimonialsDatabase = [\n    {\n      _id: 'testimonial-1',\n      name: 'John Smith',\n      university: 'Harvard University',\n      text: 'GradWay helped me get into my dream university. Their guidance throughout the application process was invaluable.',\n      image: 'https://randomuser.me/api/portraits/men/32.jpg',\n      rating: 5,\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'testimonial-2',\n      name: 'Sarah Johnson',\n      university: 'Oxford University',\n      text: \"I couldn't have navigated the complex visa process without GradWay's expert assistance. Highly recommended!\",\n      image: 'https://randomuser.me/api/portraits/women/44.jpg',\n      rating: 5,\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveTestimonialsDatabase();\n}\n\n// Testimonials Service\nconst TestimonialsService = {\n  // Get all testimonials\n  getAllTestimonials: async () => {\n    return testimonialsDatabase;\n  },\n\n  // Get testimonial by id\n  getTestimonialById: async (id) => {\n    const testimonial = testimonialsDatabase.find(item => item._id === id);\n    if (!testimonial) {\n      throw new Error('Testimonial not found');\n    }\n    return testimonial;\n  },\n\n  // Create testimonial\n  createTestimonial: async (testimonialData) => {\n    const newTestimonial = {\n      _id: 'testimonial-' + Date.now(),\n      ...testimonialData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    testimonialsDatabase.push(newTestimonial);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial created successfully');\n    return newTestimonial;\n  },\n\n  // Update testimonial\n  updateTestimonial: async (id, testimonialData) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    \n    const updatedTestimonial = {\n      ...testimonialsDatabase[index],\n      ...testimonialData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    testimonialsDatabase[index] = updatedTestimonial;\n    saveTestimonialsDatabase();\n    toast.success('Testimonial updated successfully');\n    return updatedTestimonial;\n  },\n\n  // Delete testimonial\n  deleteTestimonial: async (id) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    \n    testimonialsDatabase.splice(index, 1);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== HERO SERVICE ====================\n// Mock database for storing hero sections\nlet heroDatabase = JSON.parse(localStorage.getItem('heroDatabase')) || null;\n\n// Save the hero database to localStorage\nconst saveHeroDatabase = () => {\n  localStorage.setItem('heroDatabase', JSON.stringify(heroDatabase));\n};\n\n// Initialize with some data if empty\nif (!heroDatabase) {\n  heroDatabase = {\n    _id: 'hero-1',\n    title: 'Your Path to Academic Success',\n    subtitle: 'Expert guidance for international education',\n    description: 'We help students achieve their academic dreams through personalized guidance and support.',\n    buttonText: 'Get Started',\n    buttonLink: '/contact',\n    backgroundImage: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveHeroDatabase();\n}\n\n// Hero Service\nconst HeroService = {\n  // Get hero section\n  getHero: async () => {\n    return heroDatabase;\n  },\n\n  // Update hero section\n  updateHero: async (heroData) => {\n    heroDatabase = {\n      ...heroDatabase,\n      ...heroData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveHeroDatabase();\n    toast.success('Hero section updated successfully');\n    return heroDatabase;\n  }\n};\n\n// Export all services\nexport {\n  ContentService,\n  CoursesService,\n  ServicesService,\n  TestimonialsService,\n  HeroService\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}