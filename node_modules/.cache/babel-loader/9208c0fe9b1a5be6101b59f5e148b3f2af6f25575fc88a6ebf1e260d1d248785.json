{"ast":null,"code":"// AdminDataService.js\n// This service bypasses the backend authentication for admin operations\n\nimport { toast } from 'react-toastify';\n\n// Mock database for storing content\nlet contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n\n// Save the database to localStorage\nconst saveDatabase = () => {\n  localStorage.setItem('contentDatabase', JSON.stringify(contentDatabase));\n};\n\n// Initialize with some data if empty\nif (contentDatabase.length === 0) {\n  contentDatabase = [{\n    _id: 'home-page-' + Date.now(),\n    slug: 'home',\n    page: 'home',\n    title: 'Welcome to GradWay',\n    description: 'Your path to academic success',\n    template: 'default',\n    status: 'published',\n    isActive: true,\n    sections: [{\n      name: 'hero',\n      title: 'Hero Section',\n      order: 0,\n      fields: [{\n        name: 'title',\n        type: 'text',\n        value: 'Your Path to Academic Success',\n        label: 'Title'\n      }, {\n        name: 'subtitle',\n        type: 'text',\n        value: 'Expert guidance for international education',\n        label: 'Subtitle'\n      }, {\n        name: 'description',\n        type: 'text',\n        value: 'We help students achieve their academic dreams through personalized guidance and support.',\n        label: 'Description'\n      }]\n    }, {\n      name: 'services',\n      title: 'Services Section',\n      order: 1,\n      isRepeatable: true,\n      fields: [{\n        name: 'title',\n        type: 'text',\n        value: 'Our Services',\n        label: 'Section Title'\n      }],\n      items: [{\n        fields: [{\n          name: 'title',\n          type: 'text',\n          value: 'University Admissions',\n          label: 'Service Title'\n        }, {\n          name: 'description',\n          type: 'text',\n          value: 'Get into your dream university',\n          label: 'Service Description'\n        }],\n        order: 0\n      }]\n    }],\n    meta: {\n      description: 'GradWay - Your path to academic success',\n      keywords: ['education', 'university', 'admissions']\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveDatabase();\n}\n\n// Get all content\nexport const getAllContent = async () => {\n  return contentDatabase;\n};\n\n// Get content by slug\nexport const getContentBySlug = async slug => {\n  const content = contentDatabase.find(item => item.slug === slug);\n  if (!content) {\n    throw new Error('Content not found');\n  }\n  return content;\n};\n\n// Create content\nexport const createContent = async contentData => {\n  const newContent = {\n    _id: 'content-' + Date.now(),\n    ...contentData,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  contentDatabase.push(newContent);\n  saveDatabase();\n  toast.success('Content created successfully');\n  return newContent;\n};\n\n// Update content\nexport const updateContent = async (id, contentData) => {\n  const index = contentDatabase.findIndex(item => item._id === id);\n  if (index === -1) {\n    throw new Error('Content not found');\n  }\n  const updatedContent = {\n    ...contentDatabase[index],\n    ...contentData,\n    updatedAt: new Date().toISOString()\n  };\n  contentDatabase[index] = updatedContent;\n  saveDatabase();\n  toast.success('Content updated successfully');\n  return updatedContent;\n};\n\n// Delete content\nexport const deleteContent = async id => {\n  const index = contentDatabase.findIndex(item => item._id === id);\n  if (index === -1) {\n    throw new Error('Content not found');\n  }\n  contentDatabase.splice(index, 1);\n  saveDatabase();\n  toast.success('Content deleted successfully');\n  return {\n    success: true\n  };\n};\n\n// Update content section\nexport const updateContentSection = async (id, sectionName, sectionData) => {\n  const content = contentDatabase.find(item => item._id === id);\n  if (!content) {\n    throw new Error('Content not found');\n  }\n  const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n  if (sectionIndex === -1) {\n    throw new Error('Section not found');\n  }\n  content.sections[sectionIndex] = {\n    ...content.sections[sectionIndex],\n    ...sectionData\n  };\n  content.updatedAt = new Date().toISOString();\n  saveDatabase();\n  toast.success('Section updated successfully');\n  return content;\n};\n\n// Add section item\nexport const addSectionItem = async (id, sectionName, itemData) => {\n  const content = contentDatabase.find(item => item._id === id);\n  if (!content) {\n    throw new Error('Content not found');\n  }\n  const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n  if (sectionIndex === -1) {\n    throw new Error('Section not found');\n  }\n  const section = content.sections[sectionIndex];\n  if (!section.isRepeatable) {\n    throw new Error('This section does not support multiple items');\n  }\n  const newItem = {\n    ...itemData,\n    order: section.items ? section.items.length : 0\n  };\n  if (!section.items) {\n    section.items = [];\n  }\n  section.items.push(newItem);\n  content.updatedAt = new Date().toISOString();\n  saveDatabase();\n  toast.success('Item added successfully');\n  return content;\n};\nconst AdminDataService = {\n  getAllContent,\n  getContentBySlug,\n  createContent,\n  updateContent,\n  deleteContent,\n  updateContentSection,\n  addSectionItem\n};\nexport default AdminDataService;","map":{"version":3,"names":["toast","contentDatabase","JSON","parse","localStorage","getItem","saveDatabase","setItem","stringify","length","_id","Date","now","slug","page","title","description","template","status","isActive","sections","name","order","fields","type","value","label","isRepeatable","items","meta","keywords","createdAt","toISOString","updatedAt","getAllContent","getContentBySlug","content","find","item","Error","createContent","contentData","newContent","push","success","updateContent","id","index","findIndex","updatedContent","deleteContent","splice","updateContentSection","sectionName","sectionData","sectionIndex","section","addSectionItem","itemData","newItem","AdminDataService"],"sources":["X:/gradway/frontend/src/pages/admin/AdminDataService.js"],"sourcesContent":["// AdminDataService.js\n// This service bypasses the backend authentication for admin operations\n\nimport { toast } from 'react-toastify';\n\n// Mock database for storing content\nlet contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n\n// Save the database to localStorage\nconst saveDatabase = () => {\n  localStorage.setItem('contentDatabase', JSON.stringify(contentDatabase));\n};\n\n// Initialize with some data if empty\nif (contentDatabase.length === 0) {\n  contentDatabase = [\n    {\n      _id: 'home-page-' + Date.now(),\n      slug: 'home',\n      page: 'home',\n      title: 'Welcome to GradWay',\n      description: 'Your path to academic success',\n      template: 'default',\n      status: 'published',\n      isActive: true,\n      sections: [\n        {\n          name: 'hero',\n          title: 'Hero Section',\n          order: 0,\n          fields: [\n            {\n              name: 'title',\n              type: 'text',\n              value: 'Your Path to Academic Success',\n              label: 'Title'\n            },\n            {\n              name: 'subtitle',\n              type: 'text',\n              value: 'Expert guidance for international education',\n              label: 'Subtitle'\n            },\n            {\n              name: 'description',\n              type: 'text',\n              value: 'We help students achieve their academic dreams through personalized guidance and support.',\n              label: 'Description'\n            }\n          ]\n        },\n        {\n          name: 'services',\n          title: 'Services Section',\n          order: 1,\n          isRepeatable: true,\n          fields: [\n            {\n              name: 'title',\n              type: 'text',\n              value: 'Our Services',\n              label: 'Section Title'\n            }\n          ],\n          items: [\n            {\n              fields: [\n                {\n                  name: 'title',\n                  type: 'text',\n                  value: 'University Admissions',\n                  label: 'Service Title'\n                },\n                {\n                  name: 'description',\n                  type: 'text',\n                  value: 'Get into your dream university',\n                  label: 'Service Description'\n                }\n              ],\n              order: 0\n            }\n          ]\n        }\n      ],\n      meta: {\n        description: 'GradWay - Your path to academic success',\n        keywords: ['education', 'university', 'admissions']\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveDatabase();\n}\n\n// Get all content\nexport const getAllContent = async () => {\n  return contentDatabase;\n};\n\n// Get content by slug\nexport const getContentBySlug = async (slug) => {\n  const content = contentDatabase.find(item => item.slug === slug);\n  if (!content) {\n    throw new Error('Content not found');\n  }\n  return content;\n};\n\n// Create content\nexport const createContent = async (contentData) => {\n  const newContent = {\n    _id: 'content-' + Date.now(),\n    ...contentData,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  \n  contentDatabase.push(newContent);\n  saveDatabase();\n  toast.success('Content created successfully');\n  return newContent;\n};\n\n// Update content\nexport const updateContent = async (id, contentData) => {\n  const index = contentDatabase.findIndex(item => item._id === id);\n  if (index === -1) {\n    throw new Error('Content not found');\n  }\n  \n  const updatedContent = {\n    ...contentDatabase[index],\n    ...contentData,\n    updatedAt: new Date().toISOString()\n  };\n  \n  contentDatabase[index] = updatedContent;\n  saveDatabase();\n  toast.success('Content updated successfully');\n  return updatedContent;\n};\n\n// Delete content\nexport const deleteContent = async (id) => {\n  const index = contentDatabase.findIndex(item => item._id === id);\n  if (index === -1) {\n    throw new Error('Content not found');\n  }\n  \n  contentDatabase.splice(index, 1);\n  saveDatabase();\n  toast.success('Content deleted successfully');\n  return { success: true };\n};\n\n// Update content section\nexport const updateContentSection = async (id, sectionName, sectionData) => {\n  const content = contentDatabase.find(item => item._id === id);\n  if (!content) {\n    throw new Error('Content not found');\n  }\n  \n  const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n  if (sectionIndex === -1) {\n    throw new Error('Section not found');\n  }\n  \n  content.sections[sectionIndex] = {\n    ...content.sections[sectionIndex],\n    ...sectionData\n  };\n  \n  content.updatedAt = new Date().toISOString();\n  saveDatabase();\n  toast.success('Section updated successfully');\n  return content;\n};\n\n// Add section item\nexport const addSectionItem = async (id, sectionName, itemData) => {\n  const content = contentDatabase.find(item => item._id === id);\n  if (!content) {\n    throw new Error('Content not found');\n  }\n  \n  const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n  if (sectionIndex === -1) {\n    throw new Error('Section not found');\n  }\n  \n  const section = content.sections[sectionIndex];\n  if (!section.isRepeatable) {\n    throw new Error('This section does not support multiple items');\n  }\n  \n  const newItem = {\n    ...itemData,\n    order: section.items ? section.items.length : 0\n  };\n  \n  if (!section.items) {\n    section.items = [];\n  }\n  \n  section.items.push(newItem);\n  content.updatedAt = new Date().toISOString();\n  saveDatabase();\n  toast.success('Item added successfully');\n  return content;\n};\n\nconst AdminDataService = {\n  getAllContent,\n  getContentBySlug,\n  createContent,\n  updateContent,\n  deleteContent,\n  updateContentSection,\n  addSectionItem\n};\n\nexport default AdminDataService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}