{"ast":null,"code":"// AdminDataServices.js\n// This file contains all the admin data services for the dashboard\n\nimport { toast } from 'react-toastify';\n\n// ==================== CONTENT SERVICE ====================\n// Mock database for storing content\nlet contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n\n// Save the content database to localStorage\nconst saveContentDatabase = () => {\n  localStorage.setItem('contentDatabase', JSON.stringify(contentDatabase));\n};\n\n// Initialize with some data if empty\nif (contentDatabase.length === 0) {\n  contentDatabase = [{\n    _id: 'home-page-' + Date.now(),\n    slug: 'home',\n    page: 'home',\n    title: 'Welcome to GradWay',\n    description: 'Your path to academic success',\n    template: 'default',\n    status: 'published',\n    isActive: true,\n    sections: [{\n      name: 'hero',\n      title: 'Hero Section',\n      order: 0,\n      fields: [{\n        name: 'title',\n        type: 'text',\n        value: 'Your Path to Academic Success',\n        label: 'Title'\n      }, {\n        name: 'subtitle',\n        type: 'text',\n        value: 'Expert guidance for international education',\n        label: 'Subtitle'\n      }, {\n        name: 'description',\n        type: 'text',\n        value: 'We help students achieve their academic dreams through personalized guidance and support.',\n        label: 'Description'\n      }]\n    }],\n    meta: {\n      description: 'GradWay - Your path to academic success',\n      keywords: ['education', 'university', 'admissions']\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveContentDatabase();\n}\n\n// Content Service\nconst ContentService = {\n  // Get all content\n  getAllContent: async () => {\n    return contentDatabase;\n  },\n  // Get content by slug\n  getContentBySlug: async slug => {\n    const content = contentDatabase.find(item => item.slug === slug);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    return content;\n  },\n  // Create content\n  createContent: async contentData => {\n    const newContent = {\n      _id: 'content-' + Date.now(),\n      ...contentData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    contentDatabase.push(newContent);\n    saveContentDatabase();\n    toast.success('Content created successfully');\n    return newContent;\n  },\n  // Update content\n  updateContent: async (id, contentData) => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    const updatedContent = {\n      ...contentDatabase[index],\n      ...contentData,\n      updatedAt: new Date().toISOString()\n    };\n    contentDatabase[index] = updatedContent;\n    saveContentDatabase();\n    toast.success('Content updated successfully');\n    return updatedContent;\n  },\n  // Delete content\n  deleteContent: async id => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    contentDatabase.splice(index, 1);\n    saveContentDatabase();\n    toast.success('Content deleted successfully');\n    return {\n      success: true\n    };\n  },\n  // Update content section\n  updateContentSection: async (id, sectionName, sectionData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    content.sections[sectionIndex] = {\n      ...content.sections[sectionIndex],\n      ...sectionData\n    };\n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Section updated successfully');\n    return content;\n  },\n  // Add section item\n  addSectionItem: async (id, sectionName, itemData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    const section = content.sections[sectionIndex];\n    if (!section.isRepeatable) {\n      throw new Error('This section does not support multiple items');\n    }\n    const newItem = {\n      ...itemData,\n      order: section.items ? section.items.length : 0\n    };\n    if (!section.items) {\n      section.items = [];\n    }\n    section.items.push(newItem);\n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Item added successfully');\n    return content;\n  }\n};\n\n// ==================== COURSES SERVICE ====================\n// Mock database for storing courses\nlet coursesDatabase = JSON.parse(localStorage.getItem('coursesDatabase')) || [];\n\n// Save the courses database to localStorage\nconst saveCoursesDatabase = () => {\n  localStorage.setItem('coursesDatabase', JSON.stringify(coursesDatabase));\n};\n\n// Initialize with some data if empty\nif (coursesDatabase.length === 0) {\n  coursesDatabase = [{\n    _id: 'course-1',\n    title: 'Bachelor of Computer Science',\n    university: 'University of Technology',\n    description: 'A comprehensive program covering programming, algorithms, and software engineering.',\n    duration: '4 years',\n    tuitionFee: '$20,000 per year',\n    requirements: 'High school diploma with strong math scores',\n    image: 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'course-2',\n    title: 'Master of Business Administration',\n    university: 'Global Business School',\n    description: 'Advanced business education focusing on leadership, strategy, and management.',\n    duration: '2 years',\n    tuitionFee: '$30,000 per year',\n    requirements: 'Bachelor degree with 2+ years work experience',\n    image: 'https://images.unsplash.com/photo-1454165804606-c3d57bc86b40',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveCoursesDatabase();\n}\n\n// Courses Service\nconst CoursesService = {\n  // Get all courses\n  getAllCourses: async () => {\n    return coursesDatabase;\n  },\n  // Get course by id\n  getCourseById: async id => {\n    const course = coursesDatabase.find(item => item._id === id);\n    if (!course) {\n      throw new Error('Course not found');\n    }\n    return course;\n  },\n  // Create course\n  createCourse: async courseData => {\n    const newCourse = {\n      _id: 'course-' + Date.now(),\n      ...courseData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    coursesDatabase.push(newCourse);\n    saveCoursesDatabase();\n    toast.success('Course created successfully');\n    return newCourse;\n  },\n  // Update course\n  updateCourse: async (id, courseData) => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    const updatedCourse = {\n      ...coursesDatabase[index],\n      ...courseData,\n      updatedAt: new Date().toISOString()\n    };\n    coursesDatabase[index] = updatedCourse;\n    saveCoursesDatabase();\n    toast.success('Course updated successfully');\n    return updatedCourse;\n  },\n  // Delete course\n  deleteCourse: async id => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    coursesDatabase.splice(index, 1);\n    saveCoursesDatabase();\n    toast.success('Course deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== SERVICES SERVICE ====================\n// Mock database for storing services\nlet servicesDatabase = JSON.parse(localStorage.getItem('servicesDatabase')) || [];\n\n// Save the services database to localStorage\nconst saveServicesDatabase = () => {\n  localStorage.setItem('servicesDatabase', JSON.stringify(servicesDatabase));\n};\n\n// Initialize with some data if empty\nif (servicesDatabase.length === 0) {\n  servicesDatabase = [{\n    _id: 'service-1',\n    title: 'University Admissions',\n    description: 'We help students navigate the complex university application process and secure admissions to top institutions worldwide.',\n    icon: 'graduation-cap',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'service-2',\n    title: 'Visa Assistance',\n    description: 'Our expert team provides comprehensive support for student visa applications, ensuring a smooth process.',\n    icon: 'passport',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'service-3',\n    title: 'Career Counseling',\n    description: 'Personalized guidance to help students choose the right career path based on their interests and strengths.',\n    icon: 'briefcase',\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveServicesDatabase();\n}\n\n// Services Service\nconst ServicesService = {\n  // Get all services\n  getAllServices: async () => {\n    return servicesDatabase;\n  },\n  // Get service by id\n  getServiceById: async id => {\n    const service = servicesDatabase.find(item => item._id === id);\n    if (!service) {\n      throw new Error('Service not found');\n    }\n    return service;\n  },\n  // Create service\n  createService: async serviceData => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    servicesDatabase.push(newService);\n    saveServicesDatabase();\n    toast.success('Service created successfully');\n    return newService;\n  },\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    const updatedService = {\n      ...servicesDatabase[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    servicesDatabase[index] = updatedService;\n    saveServicesDatabase();\n    toast.success('Service updated successfully');\n    return updatedService;\n  },\n  // Delete service\n  deleteService: async id => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    servicesDatabase.splice(index, 1);\n    saveServicesDatabase();\n    toast.success('Service deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== TESTIMONIALS SERVICE ====================\n// Mock database for storing testimonials\nlet testimonialsDatabase = JSON.parse(localStorage.getItem('testimonialsDatabase')) || [];\n\n// Save the testimonials database to localStorage\nconst saveTestimonialsDatabase = () => {\n  localStorage.setItem('testimonialsDatabase', JSON.stringify(testimonialsDatabase));\n};\n\n// Initialize with some data if empty\nif (testimonialsDatabase.length === 0) {\n  testimonialsDatabase = [{\n    _id: 'testimonial-1',\n    name: 'John Smith',\n    university: 'Harvard University',\n    text: 'GradWay helped me get into my dream university. Their guidance throughout the application process was invaluable.',\n    image: 'https://randomuser.me/api/portraits/men/32.jpg',\n    rating: 5,\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'testimonial-2',\n    name: 'Sarah Johnson',\n    university: 'Oxford University',\n    text: 'I couldnt have navigated the complex visa process without GradWays expert assistance. Highly recommended!',\n    image: 'https://randomuser.me/api/portraits/women/44.jpg',\n    rating: 5,\n    featured: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveTestimonialsDatabase();\n}\n\n// Testimonials Service\nconst TestimonialsService = {\n  // Get all testimonials\n  getAllTestimonials: async () => {\n    return testimonialsDatabase;\n  },\n  // Get testimonial by id\n  getTestimonialById: async id => {\n    const testimonial = testimonialsDatabase.find(item => item._id === id);\n    if (!testimonial) {\n      throw new Error('Testimonial not found');\n    }\n    return testimonial;\n  },\n  // Create testimonial\n  createTestimonial: async testimonialData => {\n    const newTestimonial = {\n      _id: 'testimonial-' + Date.now(),\n      ...testimonialData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    testimonialsDatabase.push(newTestimonial);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial created successfully');\n    return newTestimonial;\n  },\n  // Update testimonial\n  updateTestimonial: async (id, testimonialData) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    const updatedTestimonial = {\n      ...testimonialsDatabase[index],\n      ...testimonialData,\n      updatedAt: new Date().toISOString()\n    };\n    testimonialsDatabase[index] = updatedTestimonial;\n    saveTestimonialsDatabase();\n    toast.success('Testimonial updated successfully');\n    return updatedTestimonial;\n  },\n  // Delete testimonial\n  deleteTestimonial: async id => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    testimonialsDatabase.splice(index, 1);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== CONTACTS SERVICE ====================\n// Mock database for storing contacts\nlet contactsDatabase = JSON.parse(localStorage.getItem('contactsDatabase')) || [];\n\n// Save the contacts database to localStorage\nconst saveContactsDatabase = () => {\n  localStorage.setItem('contactsDatabase', JSON.stringify(contactsDatabase));\n};\n\n// Initialize with some data if empty\nif (contactsDatabase.length === 0) {\n  contactsDatabase = [{\n    _id: 'contact-1',\n    name: 'Michael Brown',\n    email: 'michael.brown@example.com',\n    phone: '+1 (555) 123-4567',\n    message: 'I am interested in studying computer science in the UK. Can you provide information about top universities?',\n    status: 'new',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'contact-2',\n    name: 'Emma Wilson',\n    email: 'emma.wilson@example.com',\n    phone: '+1 (555) 987-6543',\n    message: 'Looking for assistance with my visa application for studying in Australia.',\n    status: 'in-progress',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveContactsDatabase();\n}\n\n// Contacts Service\nconst ContactsService = {\n  // Get all contacts\n  getAllContacts: async () => {\n    return contactsDatabase;\n  },\n  // Get contact by id\n  getContactById: async id => {\n    const contact = contactsDatabase.find(item => item._id === id);\n    if (!contact) {\n      throw new Error('Contact not found');\n    }\n    return contact;\n  },\n  // Create contact\n  createContact: async contactData => {\n    const newContact = {\n      _id: 'contact-' + Date.now(),\n      status: 'new',\n      ...contactData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    contactsDatabase.push(newContact);\n    saveContactsDatabase();\n    toast.success('Contact created successfully');\n    return newContact;\n  },\n  // Update contact\n  updateContact: async (id, contactData) => {\n    const index = contactsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Contact not found');\n    }\n    const updatedContact = {\n      ...contactsDatabase[index],\n      ...contactData,\n      updatedAt: new Date().toISOString()\n    };\n    contactsDatabase[index] = updatedContact;\n    saveContactsDatabase();\n    toast.success('Contact updated successfully');\n    return updatedContact;\n  },\n  // Delete contact\n  deleteContact: async id => {\n    const index = contactsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Contact not found');\n    }\n    contactsDatabase.splice(index, 1);\n    saveContactsDatabase();\n    toast.success('Contact deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== BLOG SERVICE ====================\n// Mock database for storing blog posts\nlet blogDatabase = JSON.parse(localStorage.getItem('blogDatabase')) || [];\n\n// Save the blog database to localStorage\nconst saveBlogDatabase = () => {\n  localStorage.setItem('blogDatabase', JSON.stringify(blogDatabase));\n};\n\n// Initialize with some data if empty\nif (blogDatabase.length === 0) {\n  blogDatabase = [{\n    _id: 'blog-1',\n    title: 'Top 10 Universities for Computer Science',\n    slug: 'top-10-universities-computer-science',\n    excerpt: 'Discover the best universities worldwide for studying computer science and technology.',\n    content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl.',\n    author: 'Admin',\n    image: 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97',\n    categories: ['Universities', 'Computer Science'],\n    tags: ['education', 'technology', 'universities'],\n    status: 'published',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'blog-2',\n    title: 'Student Visa Guide 2025',\n    slug: 'student-visa-guide-2025',\n    excerpt: 'Everything you need to know about student visa applications for popular study destinations.',\n    content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl.',\n    author: 'Admin',\n    image: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n    categories: ['Visa', 'Study Abroad'],\n    tags: ['visa', 'international students', 'study abroad'],\n    status: 'published',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveBlogDatabase();\n}\n\n// Blog Service\nconst BlogService = {\n  // Get all blog posts\n  getAllPosts: async () => {\n    return blogDatabase;\n  },\n  // Get blog post by id\n  getPostById: async id => {\n    const post = blogDatabase.find(item => item._id === id);\n    if (!post) {\n      throw new Error('Blog post not found');\n    }\n    return post;\n  },\n  // Get blog post by slug\n  getPostBySlug: async slug => {\n    const post = blogDatabase.find(item => item.slug === slug);\n    if (!post) {\n      throw new Error('Blog post not found');\n    }\n    return post;\n  },\n  // Create blog post\n  createPost: async postData => {\n    const newPost = {\n      _id: 'blog-' + Date.now(),\n      status: 'draft',\n      ...postData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    blogDatabase.push(newPost);\n    saveBlogDatabase();\n    toast.success('Blog post created successfully');\n    return newPost;\n  },\n  // Update blog post\n  updatePost: async (id, postData) => {\n    const index = blogDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Blog post not found');\n    }\n    const updatedPost = {\n      ...blogDatabase[index],\n      ...postData,\n      updatedAt: new Date().toISOString()\n    };\n    blogDatabase[index] = updatedPost;\n    saveBlogDatabase();\n    toast.success('Blog post updated successfully');\n    return updatedPost;\n  },\n  // Delete blog post\n  deletePost: async id => {\n    const index = blogDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Blog post not found');\n    }\n    blogDatabase.splice(index, 1);\n    saveBlogDatabase();\n    toast.success('Blog post deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== TEAM SERVICE ====================\n// Mock database for storing team members\nlet teamDatabase = JSON.parse(localStorage.getItem('teamDatabase')) || [];\n\n// Save the team database to localStorage\nconst saveTeamDatabase = () => {\n  localStorage.setItem('teamDatabase', JSON.stringify(teamDatabase));\n};\n\n// Initialize with some data if empty\nif (teamDatabase.length === 0) {\n  teamDatabase = [{\n    _id: 'team-1',\n    name: 'Dr. James Wilson',\n    position: 'Education Consultant',\n    bio: 'Dr. Wilson has over 15 years of experience in international education and has helped hundreds of students achieve their academic goals.',\n    image: 'https://randomuser.me/api/portraits/men/41.jpg',\n    email: 'james.wilson@gradway.com',\n    socialMedia: {\n      linkedin: 'https://linkedin.com/in/jameswilson',\n      twitter: 'https://twitter.com/jameswilson'\n    },\n    order: 1,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'team-2',\n    name: 'Lisa Thompson',\n    position: 'Visa Specialist',\n    bio: 'Lisa specializes in student visa applications and has a 98% success rate in securing visas for our clients.',\n    image: 'https://randomuser.me/api/portraits/women/63.jpg',\n    email: 'lisa.thompson@gradway.com',\n    socialMedia: {\n      linkedin: 'https://linkedin.com/in/lisathompson'\n    },\n    order: 2,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveTeamDatabase();\n}\n\n// Team Service\nconst TeamService = {\n  // Get all team members\n  getAllMembers: async () => {\n    return teamDatabase;\n  },\n  // Get team member by id\n  getMemberById: async id => {\n    const member = teamDatabase.find(item => item._id === id);\n    if (!member) {\n      throw new Error('Team member not found');\n    }\n    return member;\n  },\n  // Create team member\n  createMember: async memberData => {\n    const newMember = {\n      _id: 'team-' + Date.now(),\n      order: teamDatabase.length + 1,\n      ...memberData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    teamDatabase.push(newMember);\n    saveTeamDatabase();\n    toast.success('Team member created successfully');\n    return newMember;\n  },\n  // Update team member\n  updateMember: async (id, memberData) => {\n    const index = teamDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Team member not found');\n    }\n    const updatedMember = {\n      ...teamDatabase[index],\n      ...memberData,\n      updatedAt: new Date().toISOString()\n    };\n    teamDatabase[index] = updatedMember;\n    saveTeamDatabase();\n    toast.success('Team member updated successfully');\n    return updatedMember;\n  },\n  // Delete team member\n  deleteMember: async id => {\n    const index = teamDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Team member not found');\n    }\n    teamDatabase.splice(index, 1);\n    saveTeamDatabase();\n    toast.success('Team member deleted successfully');\n    return {\n      success: true\n    };\n  }\n};\n\n// ==================== HERO SERVICE ====================\n// Mock database for storing hero sections\nlet heroDatabase = JSON.parse(localStorage.getItem('heroDatabase')) || null;\n\n// Save the hero database to localStorage\nconst saveHeroDatabase = () => {\n  localStorage.setItem('heroDatabase', JSON.stringify(heroDatabase));\n};\n\n// Initialize with some data if empty\nif (!heroDatabase) {\n  heroDatabase = {\n    _id: 'hero-1',\n    title: 'Your Path to Academic Success',\n    subtitle: 'Expert guidance for international education',\n    description: 'We help students achieve their academic dreams through personalized guidance and support.',\n    buttonText: 'Get Started',\n    buttonLink: '/contact',\n    backgroundImage: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveHeroDatabase();\n}\n\n// Hero Service\nconst HeroService = {\n  // Get hero section\n  getHero: async () => {\n    return heroDatabase;\n  },\n  // Update hero section\n  updateHero: async heroData => {\n    heroDatabase = {\n      ...heroDatabase,\n      ...heroData,\n      updatedAt: new Date().toISOString()\n    };\n    saveHeroDatabase();\n    toast.success('Hero section updated successfully');\n    return heroDatabase;\n  }\n};\n\n// Export all services\n// ==================== ABOUT SECTION SERVICE ====================\n// Mock database for storing about section\nlet aboutDatabase = JSON.parse(localStorage.getItem('aboutDatabase')) || null;\n\n// Save the about database to localStorage\nconst saveAboutDatabase = () => {\n  localStorage.setItem('aboutDatabase', JSON.stringify(aboutDatabase));\n};\n\n// Initialize with some data if empty\nif (!aboutDatabase) {\n  aboutDatabase = {\n    _id: 'about-1',\n    title: 'About GradWay',\n    description1: 'We are a team of dedicated education consultants with years of experience in helping students achieve their academic dreams. Our mission is to provide personalized guidance and support throughout your educational journey.',\n    description2: 'With a proven track record of successful placements and satisfied students, we take pride in our comprehensive approach to education consulting. We understand that each student is unique, and we tailor our services to meet your specific needs and goals.',\n    image: 'https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3',\n    yearsExperience: 10,\n    learnMoreButtonText: 'Learn More About Us',\n    learnMoreButtonLink: '/about',\n    contactButtonText: 'Contact Us',\n    contactButtonLink: '/contact',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveAboutDatabase();\n}\n\n// About Service\nconst AboutService = {\n  // Get about section\n  getAbout: async () => {\n    return aboutDatabase;\n  },\n  // Update about section\n  updateAbout: async aboutData => {\n    aboutDatabase = {\n      ...aboutDatabase,\n      ...aboutData,\n      updatedAt: new Date().toISOString()\n    };\n    saveAboutDatabase();\n    toast.success('About section updated successfully');\n    return aboutDatabase;\n  }\n};\n\n// ==================== COUNTRIES SERVICE ====================\n// Mock database for storing countries\nlet countriesDatabase = JSON.parse(localStorage.getItem('countriesDatabase')) || [];\n\n// Save the countries database to localStorage\nconst saveCountriesDatabase = () => {\n  localStorage.setItem('countriesDatabase', JSON.stringify(countriesDatabase));\n};\n\n// Initialize with some data if empty\nif (countriesDatabase.length === 0) {\n  countriesDatabase = [{\n    _id: 'country-' + Date.now(),\n    name: \"United Kingdom\",\n    description: \"World-class education in historic institutions\",\n    image: \"https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?ixlib=rb-4.0.3\",\n    flag: \"🇬🇧\",\n    order: 1,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'country-' + (Date.now() + 1),\n    name: \"United States\",\n    description: \"Innovation and diverse academic opportunities\",\n    image: \"https://images.unsplash.com/photo-1501466044931-62695aada8e9?ixlib=rb-4.0.3\",\n    flag: \"🇺🇸\",\n    order: 2,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'country-' + (Date.now() + 2),\n    name: \"Canada\",\n    description: \"High quality education in a multicultural environment\",\n    image: \"https://images.unsplash.com/photo-1503614472-8c93d56e92ce?ixlib=rb-4.0.3\",\n    flag: \"🇨🇦\",\n    order: 3,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }, {\n    _id: 'country-' + (Date.now() + 3),\n    name: \"Australia\",\n    description: \"Excellence in education with great lifestyle\",\n    image: \"https://images.unsplash.com/photo-1523482580672-f109ba8cb9be?ixlib=rb-4.0.3\",\n    flag: \"🇦🇺\",\n    order: 4,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }];\n  saveCountriesDatabase();\n}\n\n// Countries Service\nconst CountriesService = {\n  // Get all countries\n  getCountries: async () => {\n    return countriesDatabase;\n  },\n  // Get country by ID\n  getCountryById: async id => {\n    return countriesDatabase.find(country => country._id === id);\n  },\n  // Add new country\n  addCountry: async countryData => {\n    const newCountry = {\n      _id: 'country-' + Date.now(),\n      ...countryData,\n      order: countriesDatabase.length + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    countriesDatabase.push(newCountry);\n    saveCountriesDatabase();\n    toast.success('Country added successfully');\n    return newCountry;\n  },\n  // Update country\n  updateCountry: async (id, countryData) => {\n    const index = countriesDatabase.findIndex(country => country._id === id);\n    if (index === -1) {\n      toast.error('Country not found');\n      return null;\n    }\n    countriesDatabase[index] = {\n      ...countriesDatabase[index],\n      ...countryData,\n      updatedAt: new Date().toISOString()\n    };\n    saveCountriesDatabase();\n    toast.success('Country updated successfully');\n    return countriesDatabase[index];\n  },\n  // Delete country\n  deleteCountry: async id => {\n    const initialLength = countriesDatabase.length;\n    countriesDatabase = countriesDatabase.filter(country => country._id !== id);\n    if (countriesDatabase.length === initialLength) {\n      toast.error('Country not found');\n      return false;\n    }\n\n    // Reorder remaining countries\n    countriesDatabase = countriesDatabase.map((country, index) => ({\n      ...country,\n      order: index + 1\n    }));\n    saveCountriesDatabase();\n    toast.success('Country deleted successfully');\n    return true;\n  },\n  // Reorder countries\n  reorderCountries: async orderedIds => {\n    // Update order based on the provided array of IDs\n    orderedIds.forEach((id, index) => {\n      const countryIndex = countriesDatabase.findIndex(country => country._id === id);\n      if (countryIndex !== -1) {\n        countriesDatabase[countryIndex].order = index + 1;\n      }\n    });\n\n    // Sort the array by the new order\n    countriesDatabase.sort((a, b) => a.order - b.order);\n    saveCountriesDatabase();\n    toast.success('Countries reordered successfully');\n    return countriesDatabase;\n  }\n};\n\n// ==================== SERVICES PAGE SERVICE ====================\n// Mock database for storing services page data\nlet servicesPageDatabase = JSON.parse(localStorage.getItem('servicesPageDatabase'));\n\n// Save the services page database to localStorage\nconst saveServicesPageDatabase = () => {\n  localStorage.setItem('servicesPageDatabase', JSON.stringify(servicesPageDatabase));\n};\n\n// Initialize with some data if empty\nif (!servicesPageDatabase) {\n  servicesPageDatabase = {\n    services: [{\n      _id: 'service-1',\n      id: \"study-abroad\",\n      iconName: \"FaGraduationCap\",\n      title: \"Study Abroad Consultation\",\n      description: \"Expert guidance on choosing the right country, university, and program for your academic goals.\",\n      features: [\"Country and university selection\", \"Program matching based on your profile\", \"Scholarship and funding guidance\", \"Cultural adaptation support\"],\n      order: 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }, {\n      _id: 'service-2',\n      id: \"visa\",\n      iconName: \"FaPassport\",\n      title: \"Visa Application Guidance\",\n      description: \"Comprehensive support for visa applications, documentation, and interview preparation.\",\n      features: [\"Document checklist and preparation\", \"Application form assistance\", \"Interview preparation\", \"Post-approval guidance\"],\n      order: 2,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }, {\n      _id: 'service-3',\n      id: \"admission\",\n      iconName: \"FaUniversity\",\n      title: \"University Admission Support\",\n      description: \"Personalized assistance with university applications, essays, and admission requirements.\",\n      features: [\"Application strategy development\", \"Personal statement review\", \"Recommendation letter guidance\", \"Portfolio preparation\"],\n      order: 3,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }, {\n      _id: 'service-4',\n      id: \"language\",\n      iconName: \"FaLanguage\",\n      title: \"Language Training\",\n      description: \"Specialized language courses to help you meet the language requirements of your chosen program.\",\n      features: [\"IELTS/TOEFL preparation\", \"Academic writing skills\", \"Speaking and listening practice\", \"Test-taking strategies\"],\n      order: 4,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }],\n    hero: {\n      title: \"Our Services\",\n      description: \"Comprehensive support for your educational journey, from initial consultation to successful admission.\"\n    },\n    process: {\n      title: \"Our Process\",\n      description: \"We follow a structured approach to ensure your success at every step.\",\n      steps: [{\n        number: 1,\n        title: \"Initial Consultation\",\n        description: \"Understanding your goals and requirements\"\n      }, {\n        number: 2,\n        title: \"Profile Assessment\",\n        description: \"Evaluating your academic background and preferences\"\n      }, {\n        number: 3,\n        title: \"Application Support\",\n        description: \"Guiding you through the application process\"\n      }, {\n        number: 4,\n        title: \"Post-Admission\",\n        description: \"Supporting your transition to university life\"\n      }]\n    },\n    cta: {\n      title: \"Ready to Start Your Journey?\",\n      description: \"Contact us today to learn more about our services and how we can help you achieve your academic goals.\",\n      buttonText: \"Get in Touch\",\n      buttonLink: \"/contact\"\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveServicesPageDatabase();\n}\n\n// Services Page Service\nconst ServicesPageService = {\n  // Get services page data\n  getServicesPage: async () => {\n    return servicesPageDatabase;\n  },\n  // Update hero section\n  updateHero: async heroData => {\n    servicesPageDatabase.hero = {\n      ...servicesPageDatabase.hero,\n      ...heroData\n    };\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Hero section updated successfully');\n    return servicesPageDatabase.hero;\n  },\n  // Update process section\n  updateProcess: async processData => {\n    servicesPageDatabase.process = {\n      ...servicesPageDatabase.process,\n      ...processData\n    };\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Process section updated successfully');\n    return servicesPageDatabase.process;\n  },\n  // Update CTA section\n  updateCta: async ctaData => {\n    servicesPageDatabase.cta = {\n      ...servicesPageDatabase.cta,\n      ...ctaData\n    };\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('CTA section updated successfully');\n    return servicesPageDatabase.cta;\n  },\n  // Get all services\n  getServices: async () => {\n    return servicesPageDatabase.services;\n  },\n  // Get service by ID\n  getServiceById: async id => {\n    return servicesPageDatabase.services.find(service => service._id === id);\n  },\n  // Add new service\n  addService: async serviceData => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      order: servicesPageDatabase.services.length + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    servicesPageDatabase.services.push(newService);\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Service added successfully');\n    return newService;\n  },\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesPageDatabase.services.findIndex(service => service._id === id);\n    if (index === -1) {\n      toast.error('Service not found');\n      return null;\n    }\n    servicesPageDatabase.services[index] = {\n      ...servicesPageDatabase.services[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Service updated successfully');\n    return servicesPageDatabase.services[index];\n  },\n  // Delete service\n  deleteService: async id => {\n    const initialLength = servicesPageDatabase.services.length;\n    servicesPageDatabase.services = servicesPageDatabase.services.filter(service => service._id !== id);\n    if (servicesPageDatabase.services.length === initialLength) {\n      toast.error('Service not found');\n      return false;\n    }\n\n    // Reorder remaining services\n    servicesPageDatabase.services = servicesPageDatabase.services.map((service, index) => ({\n      ...service,\n      order: index + 1\n    }));\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Service deleted successfully');\n    return true;\n  },\n  // Reorder services\n  reorderServices: async orderedIds => {\n    // Update order based on the provided array of IDs\n    orderedIds.forEach((id, index) => {\n      const serviceIndex = servicesPageDatabase.services.findIndex(service => service._id === id);\n      if (serviceIndex !== -1) {\n        servicesPageDatabase.services[serviceIndex].order = index + 1;\n      }\n    });\n\n    // Sort the array by the new order\n    servicesPageDatabase.services.sort((a, b) => a.order - b.order);\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Services reordered successfully');\n    return servicesPageDatabase.services;\n  }\n};\n\n// ==================== ABOUT PAGE SERVICE ====================\n// Mock database for storing about page data\nlet aboutPageDatabase = JSON.parse(localStorage.getItem('aboutPageDatabase'));\n\n// Save the about page database to localStorage\nconst saveAboutPageDatabase = () => {\n  localStorage.setItem('aboutPageDatabase', JSON.stringify(aboutPageDatabase));\n};\n\n// Initialize with some data if empty\nif (!aboutPageDatabase) {\n  aboutPageDatabase = {\n    hero: {\n      title: \"About GradWay\",\n      description: \"We are dedicated to helping students achieve their academic dreams through personalized guidance and expert support.\"\n    },\n    mission: {\n      title: \"Our Mission\",\n      description1: \"To provide comprehensive educational consulting services that empower students to achieve their academic goals and unlock their full potential.\",\n      description2: \"We believe in personalized guidance, transparent processes, and unwavering support throughout every student's educational journey.\"\n    },\n    vision: {\n      title: \"Our Vision\",\n      description1: \"To be the leading educational consultancy, recognized for our commitment to excellence and student success.\",\n      description2: \"We envision a world where every student has access to quality education and the support they need to succeed.\"\n    },\n    team: {\n      title: \"Meet Our Team\",\n      description: \"Our team of experienced professionals is dedicated to helping you achieve your academic goals.\"\n    },\n    cta: {\n      title: \"Ready to Start Your Journey?\",\n      description: \"Contact us today to learn how we can help you achieve your academic goals.\",\n      buttonText: \"Get in Touch\",\n      buttonLink: \"/contact\"\n    },\n    teamMembers: [{\n      _id: 'team-1',\n      name: \"Dr. Sarah Williams\",\n      role: \"Founder & CEO\",\n      image: \"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3\",\n      bio: \"With over 15 years of experience in education consulting, Sarah founded GradWay to help students achieve their academic dreams.\",\n      order: 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }, {\n      _id: 'team-2',\n      name: \"Michael Chen\",\n      role: \"Admissions Specialist\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3\",\n      bio: \"Michael specializes in university admissions and has helped hundreds of students secure spots in top universities worldwide.\",\n      order: 2,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }, {\n      _id: 'team-3',\n      name: \"Emma Wilson\",\n      role: \"Visa Consultant\",\n      image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3\",\n      bio: \"Emma's expertise in visa applications and immigration processes ensures smooth transitions for our students.\",\n      order: 3,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveAboutPageDatabase();\n}\n\n// About Page Service\nconst AboutPageService = {\n  // Get about page data\n  getAboutPage: async () => {\n    return aboutPageDatabase;\n  },\n  // Update hero section\n  updateHero: async heroData => {\n    aboutPageDatabase.hero = {\n      ...aboutPageDatabase.hero,\n      ...heroData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Hero section updated successfully');\n    return aboutPageDatabase.hero;\n  },\n  // Update mission section\n  updateMission: async missionData => {\n    aboutPageDatabase.mission = {\n      ...aboutPageDatabase.mission,\n      ...missionData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Mission section updated successfully');\n    return aboutPageDatabase.mission;\n  },\n  // Update vision section\n  updateVision: async visionData => {\n    aboutPageDatabase.vision = {\n      ...aboutPageDatabase.vision,\n      ...visionData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Vision section updated successfully');\n    return aboutPageDatabase.vision;\n  },\n  // Update team section\n  updateTeamSection: async teamData => {\n    aboutPageDatabase.team = {\n      ...aboutPageDatabase.team,\n      ...teamData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team section updated successfully');\n    return aboutPageDatabase.team;\n  },\n  // Update CTA section\n  updateCta: async ctaData => {\n    aboutPageDatabase.cta = {\n      ...aboutPageDatabase.cta,\n      ...ctaData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('CTA section updated successfully');\n    return aboutPageDatabase.cta;\n  },\n  // Get all team members\n  getTeamMembers: async () => {\n    return aboutPageDatabase.teamMembers;\n  },\n  // Get team member by ID\n  getTeamMemberById: async id => {\n    return aboutPageDatabase.teamMembers.find(member => member._id === id);\n  },\n  // Add new team member\n  addTeamMember: async memberData => {\n    const newMember = {\n      _id: 'team-' + Date.now(),\n      ...memberData,\n      order: aboutPageDatabase.teamMembers.length + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    aboutPageDatabase.teamMembers.push(newMember);\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team member added successfully');\n    return newMember;\n  },\n  // Update team member\n  updateTeamMember: async (id, memberData) => {\n    const index = aboutPageDatabase.teamMembers.findIndex(member => member._id === id);\n    if (index === -1) {\n      toast.error('Team member not found');\n      return null;\n    }\n    aboutPageDatabase.teamMembers[index] = {\n      ...aboutPageDatabase.teamMembers[index],\n      ...memberData,\n      updatedAt: new Date().toISOString()\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team member updated successfully');\n    return aboutPageDatabase.teamMembers[index];\n  },\n  // Delete team member\n  deleteTeamMember: async id => {\n    const initialLength = aboutPageDatabase.teamMembers.length;\n    aboutPageDatabase.teamMembers = aboutPageDatabase.teamMembers.filter(member => member._id !== id);\n    if (aboutPageDatabase.teamMembers.length === initialLength) {\n      toast.error('Team member not found');\n      return false;\n    }\n\n    // Reorder remaining team members\n    aboutPageDatabase.teamMembers = aboutPageDatabase.teamMembers.map((member, index) => ({\n      ...member,\n      order: index + 1\n    }));\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team member deleted successfully');\n    return true;\n  },\n  // Reorder team members\n  reorderTeamMembers: async orderedIds => {\n    // Update order based on the provided array of IDs\n    orderedIds.forEach((id, index) => {\n      const memberIndex = aboutPageDatabase.teamMembers.findIndex(member => member._id === id);\n      if (memberIndex !== -1) {\n        aboutPageDatabase.teamMembers[memberIndex].order = index + 1;\n      }\n    });\n\n    // Sort the array by the new order\n    aboutPageDatabase.teamMembers.sort((a, b) => a.order - b.order);\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team members reordered successfully');\n    return aboutPageDatabase.teamMembers;\n  }\n};\n\n// ==================== CONTACT PAGE SERVICE ====================\n// Mock database for storing contact page data\nlet contactPageDatabase = JSON.parse(localStorage.getItem('contactPageDatabase'));\n\n// Save the contact page database to localStorage\nconst saveContactPageDatabase = () => {\n  localStorage.setItem('contactPageDatabase', JSON.stringify(contactPageDatabase));\n};\n\n// Initialize with some data if empty\nif (!contactPageDatabase) {\n  contactPageDatabase = {\n    hero: {\n      title: \"Contact Us\",\n      description: \"Get in touch with our team for personalized guidance and support.\"\n    },\n    contactInfo: {\n      phone: {\n        title: \"Phone\",\n        value: \"+1 (234) 567-890\"\n      },\n      email: {\n        title: \"Email\",\n        value: \"info@gradway.com\"\n      },\n      hours: {\n        title: \"Working Hours\",\n        value: \"Mon-Fri: 9am-6pm\"\n      }\n    },\n    form: {\n      title: \"Send us a Message\"\n    },\n    location: {\n      title: \"Our Location\",\n      address: {\n        title: \"Office Address\",\n        line1: \"123 Education Street\",\n        line2: \"Academic City, AC 12345\",\n        line3: \"United States\"\n      },\n      mapEmbedUrl: \"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3022.2155710122!2d-73.987844924164!3d40.75733997132258!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c25855c6480299%3A0x55194ec5a1ae072e!2sTimes%20Square!5e0!3m2!1sen!2sus!4v1681234567890!5m2!1sen!2sus\"\n    },\n    services: [{\n      value: \"study-abroad\",\n      label: \"Study Abroad Consultation\"\n    }, {\n      value: \"visa\",\n      label: \"Visa Application Guidance\"\n    }, {\n      value: \"admission\",\n      label: \"University Admission Support\"\n    }, {\n      value: \"language\",\n      label: \"Language Training\"\n    }],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveContactPageDatabase();\n}\n\n// Contact Page Service\nconst ContactPageService = {\n  // Get contact page data\n  getContactPage: async () => {\n    return contactPageDatabase;\n  },\n  // Update hero section\n  updateHero: async heroData => {\n    contactPageDatabase.hero = {\n      ...contactPageDatabase.hero,\n      ...heroData\n    };\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Hero section updated successfully');\n    return contactPageDatabase.hero;\n  },\n  // Update contact info\n  updateContactInfo: async contactInfoData => {\n    contactPageDatabase.contactInfo = {\n      ...contactPageDatabase.contactInfo,\n      ...contactInfoData\n    };\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Contact information updated successfully');\n    return contactPageDatabase.contactInfo;\n  },\n  // Update location info\n  updateLocation: async locationData => {\n    contactPageDatabase.location = {\n      ...contactPageDatabase.location,\n      ...locationData\n    };\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Location information updated successfully');\n    return contactPageDatabase.location;\n  },\n  // Get all services\n  getServices: async () => {\n    return contactPageDatabase.services;\n  },\n  // Add new service\n  addService: async serviceData => {\n    const newService = {\n      value: serviceData.value.toLowerCase().replace(/\\s+/g, '-'),\n      label: serviceData.label,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    contactPageDatabase.services.push(newService);\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Service added successfully');\n    return newService;\n  },\n  // Update service\n  updateService: async (index, serviceData) => {\n    if (index < 0 || index >= contactPageDatabase.services.length) {\n      toast.error('Service not found');\n      return null;\n    }\n    contactPageDatabase.services[index] = {\n      ...contactPageDatabase.services[index],\n      value: serviceData.value.toLowerCase().replace(/\\s+/g, '-'),\n      label: serviceData.label,\n      updatedAt: new Date().toISOString()\n    };\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Service updated successfully');\n    return contactPageDatabase.services[index];\n  },\n  // Delete service\n  deleteService: async index => {\n    if (index < 0 || index >= contactPageDatabase.services.length) {\n      toast.error('Service not found');\n      return false;\n    }\n    contactPageDatabase.services.splice(index, 1);\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Service deleted successfully');\n    return true;\n  }\n};\n\n// ==================== FOOTER SERVICE ====================\n// Mock database for storing footer data\nlet footerDatabase = JSON.parse(localStorage.getItem('footerDatabase'));\n\n// Save the footer database to localStorage\nconst saveFooterDatabase = () => {\n  localStorage.setItem('footerDatabase', JSON.stringify(footerDatabase));\n};\n\n// Initialize with default data if empty\nif (!footerDatabase) {\n  footerDatabase = {\n    companyInfo: {\n      name: 'GradWay',\n      description: 'Your trusted partner in academic success. We provide expert guidance and support for your educational journey.',\n      socialLinks: [{\n        platform: 'facebook',\n        url: 'https://facebook.com'\n      }, {\n        platform: 'twitter',\n        url: 'https://twitter.com'\n      }, {\n        platform: 'instagram',\n        url: 'https://instagram.com'\n      }, {\n        platform: 'linkedin',\n        url: 'https://linkedin.com'\n      }]\n    },\n    quickLinks: [{\n      name: 'Home',\n      url: '/'\n    }, {\n      name: 'About Us',\n      url: '/about'\n    }, {\n      name: 'Services',\n      url: '/services'\n    }, {\n      name: 'Blog',\n      url: '/blog'\n    }, {\n      name: 'Contact',\n      url: '/contact'\n    }],\n    services: [{\n      name: 'Study Abroad Consultation',\n      url: '/services#study-abroad'\n    }, {\n      name: 'Visa Application Guidance',\n      url: '/services#visa'\n    }, {\n      name: 'University Admission Support',\n      url: '/services#admission'\n    }, {\n      name: 'Language Training',\n      url: '/services#language'\n    }],\n    contactInfo: {\n      address: '123 Education Street, Academic City, AC 12345',\n      phone: '+1 (234) 567-890',\n      email: 'info@gradway.com'\n    },\n    copyright: '© {year} GradWay. All rights reserved.'\n  };\n  saveFooterDatabase();\n}\n\n// Footer Service\nconst FooterService = {\n  // Get footer data\n  getFooterData: async () => {\n    return footerDatabase;\n  },\n  // Update company info\n  updateCompanyInfo: async companyInfo => {\n    footerDatabase.companyInfo = {\n      ...footerDatabase.companyInfo,\n      ...companyInfo\n    };\n    saveFooterDatabase();\n    toast.success('Company information updated successfully');\n    return footerDatabase.companyInfo;\n  },\n  // Update social links\n  updateSocialLinks: async socialLinks => {\n    footerDatabase.companyInfo.socialLinks = socialLinks;\n    saveFooterDatabase();\n    toast.success('Social links updated successfully');\n    return footerDatabase.companyInfo.socialLinks;\n  },\n  // Update quick links\n  updateQuickLinks: async quickLinks => {\n    footerDatabase.quickLinks = quickLinks;\n    saveFooterDatabase();\n    toast.success('Quick links updated successfully');\n    return footerDatabase.quickLinks;\n  },\n  // Update services\n  updateServices: async services => {\n    footerDatabase.services = services;\n    saveFooterDatabase();\n    toast.success('Services updated successfully');\n    return footerDatabase.services;\n  },\n  // Update contact info\n  updateContactInfo: async contactInfo => {\n    footerDatabase.contactInfo = {\n      ...footerDatabase.contactInfo,\n      ...contactInfo\n    };\n    saveFooterDatabase();\n    toast.success('Contact information updated successfully');\n    return footerDatabase.contactInfo;\n  },\n  // Update copyright\n  updateCopyright: async copyright => {\n    footerDatabase.copyright = copyright;\n    saveFooterDatabase();\n    toast.success('Copyright updated successfully');\n    return footerDatabase.copyright;\n  }\n};\nexport { ContentService, CoursesService, ServicesService, TestimonialsService, ContactsService, BlogService, TeamService, HeroService, AboutService, CountriesService, ServicesPageService, AboutPageService, ContactPageService, FooterService };","map":{"version":3,"names":["toast","contentDatabase","JSON","parse","localStorage","getItem","saveContentDatabase","setItem","stringify","length","_id","Date","now","slug","page","title","description","template","status","isActive","sections","name","order","fields","type","value","label","meta","keywords","createdAt","toISOString","updatedAt","ContentService","getAllContent","getContentBySlug","content","find","item","Error","createContent","contentData","newContent","push","success","updateContent","id","index","findIndex","updatedContent","deleteContent","splice","updateContentSection","sectionName","sectionData","sectionIndex","section","addSectionItem","itemData","isRepeatable","newItem","items","coursesDatabase","saveCoursesDatabase","university","duration","tuitionFee","requirements","image","featured","CoursesService","getAllCourses","getCourseById","course","createCourse","courseData","newCourse","updateCourse","updatedCourse","deleteCourse","servicesDatabase","saveServicesDatabase","icon","ServicesService","getAllServices","getServiceById","service","createService","serviceData","newService","updateService","updatedService","deleteService","testimonialsDatabase","saveTestimonialsDatabase","text","rating","TestimonialsService","getAllTestimonials","getTestimonialById","testimonial","createTestimonial","testimonialData","newTestimonial","updateTestimonial","updatedTestimonial","deleteTestimonial","contactsDatabase","saveContactsDatabase","email","phone","message","ContactsService","getAllContacts","getContactById","contact","createContact","contactData","newContact","updateContact","updatedContact","deleteContact","blogDatabase","saveBlogDatabase","excerpt","author","categories","tags","BlogService","getAllPosts","getPostById","post","getPostBySlug","createPost","postData","newPost","updatePost","updatedPost","deletePost","teamDatabase","saveTeamDatabase","position","bio","socialMedia","linkedin","twitter","TeamService","getAllMembers","getMemberById","member","createMember","memberData","newMember","updateMember","updatedMember","deleteMember","heroDatabase","saveHeroDatabase","subtitle","buttonText","buttonLink","backgroundImage","HeroService","getHero","updateHero","heroData","aboutDatabase","saveAboutDatabase","description1","description2","yearsExperience","learnMoreButtonText","learnMoreButtonLink","contactButtonText","contactButtonLink","AboutService","getAbout","updateAbout","aboutData","countriesDatabase","saveCountriesDatabase","flag","CountriesService","getCountries","getCountryById","country","addCountry","countryData","newCountry","updateCountry","error","deleteCountry","initialLength","filter","map","reorderCountries","orderedIds","forEach","countryIndex","sort","a","b","servicesPageDatabase","saveServicesPageDatabase","services","iconName","features","hero","process","steps","number","cta","ServicesPageService","getServicesPage","updateProcess","processData","updateCta","ctaData","getServices","addService","reorderServices","serviceIndex","aboutPageDatabase","saveAboutPageDatabase","mission","vision","team","teamMembers","role","AboutPageService","getAboutPage","updateMission","missionData","updateVision","visionData","updateTeamSection","teamData","getTeamMembers","getTeamMemberById","addTeamMember","updateTeamMember","deleteTeamMember","reorderTeamMembers","memberIndex","contactPageDatabase","saveContactPageDatabase","contactInfo","hours","form","location","address","line1","line2","line3","mapEmbedUrl","ContactPageService","getContactPage","updateContactInfo","contactInfoData","updateLocation","locationData","toLowerCase","replace","footerDatabase","saveFooterDatabase","companyInfo","socialLinks","platform","url","quickLinks","copyright","FooterService","getFooterData","updateCompanyInfo","updateSocialLinks","updateQuickLinks","updateServices","updateCopyright"],"sources":["X:/gradway/frontend/src/pages/admin/AdminDataServices.js"],"sourcesContent":["// AdminDataServices.js\n// This file contains all the admin data services for the dashboard\n\nimport { toast } from 'react-toastify';\n\n// ==================== CONTENT SERVICE ====================\n// Mock database for storing content\nlet contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n\n// Save the content database to localStorage\nconst saveContentDatabase = () => {\n  localStorage.setItem('contentDatabase', JSON.stringify(contentDatabase));\n};\n\n// Initialize with some data if empty\nif (contentDatabase.length === 0) {\n  contentDatabase = [\n    {\n      _id: 'home-page-' + Date.now(),\n      slug: 'home',\n      page: 'home',\n      title: 'Welcome to GradWay',\n      description: 'Your path to academic success',\n      template: 'default',\n      status: 'published',\n      isActive: true,\n      sections: [\n        {\n          name: 'hero',\n          title: 'Hero Section',\n          order: 0,\n          fields: [\n            {\n              name: 'title',\n              type: 'text',\n              value: 'Your Path to Academic Success',\n              label: 'Title'\n            },\n            {\n              name: 'subtitle',\n              type: 'text',\n              value: 'Expert guidance for international education',\n              label: 'Subtitle'\n            },\n            {\n              name: 'description',\n              type: 'text',\n              value: 'We help students achieve their academic dreams through personalized guidance and support.',\n              label: 'Description'\n            }\n          ]\n        }\n      ],\n      meta: {\n        description: 'GradWay - Your path to academic success',\n        keywords: ['education', 'university', 'admissions']\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveContentDatabase();\n}\n\n// Content Service\nconst ContentService = {\n  // Get all content\n  getAllContent: async () => {\n    return contentDatabase;\n  },\n\n  // Get content by slug\n  getContentBySlug: async (slug) => {\n    const content = contentDatabase.find(item => item.slug === slug);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    return content;\n  },\n\n  // Create content\n  createContent: async (contentData) => {\n    const newContent = {\n      _id: 'content-' + Date.now(),\n      ...contentData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    contentDatabase.push(newContent);\n    saveContentDatabase();\n    toast.success('Content created successfully');\n    return newContent;\n  },\n\n  // Update content\n  updateContent: async (id, contentData) => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    \n    const updatedContent = {\n      ...contentDatabase[index],\n      ...contentData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    contentDatabase[index] = updatedContent;\n    saveContentDatabase();\n    toast.success('Content updated successfully');\n    return updatedContent;\n  },\n\n  // Delete content\n  deleteContent: async (id) => {\n    const index = contentDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Content not found');\n    }\n    \n    contentDatabase.splice(index, 1);\n    saveContentDatabase();\n    toast.success('Content deleted successfully');\n    return { success: true };\n  },\n\n  // Update content section\n  updateContentSection: async (id, sectionName, sectionData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    \n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    \n    content.sections[sectionIndex] = {\n      ...content.sections[sectionIndex],\n      ...sectionData\n    };\n    \n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Section updated successfully');\n    return content;\n  },\n\n  // Add section item\n  addSectionItem: async (id, sectionName, itemData) => {\n    const content = contentDatabase.find(item => item._id === id);\n    if (!content) {\n      throw new Error('Content not found');\n    }\n    \n    const sectionIndex = content.sections.findIndex(section => section.name === sectionName);\n    if (sectionIndex === -1) {\n      throw new Error('Section not found');\n    }\n    \n    const section = content.sections[sectionIndex];\n    if (!section.isRepeatable) {\n      throw new Error('This section does not support multiple items');\n    }\n    \n    const newItem = {\n      ...itemData,\n      order: section.items ? section.items.length : 0\n    };\n    \n    if (!section.items) {\n      section.items = [];\n    }\n    \n    section.items.push(newItem);\n    content.updatedAt = new Date().toISOString();\n    saveContentDatabase();\n    toast.success('Item added successfully');\n    return content;\n  }\n};\n\n// ==================== COURSES SERVICE ====================\n// Mock database for storing courses\nlet coursesDatabase = JSON.parse(localStorage.getItem('coursesDatabase')) || [];\n\n// Save the courses database to localStorage\nconst saveCoursesDatabase = () => {\n  localStorage.setItem('coursesDatabase', JSON.stringify(coursesDatabase));\n};\n\n// Initialize with some data if empty\nif (coursesDatabase.length === 0) {\n  coursesDatabase = [\n    {\n      _id: 'course-1',\n      title: 'Bachelor of Computer Science',\n      university: 'University of Technology',\n      description: 'A comprehensive program covering programming, algorithms, and software engineering.',\n      duration: '4 years',\n      tuitionFee: '$20,000 per year',\n      requirements: 'High school diploma with strong math scores',\n      image: 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'course-2',\n      title: 'Master of Business Administration',\n      university: 'Global Business School',\n      description: 'Advanced business education focusing on leadership, strategy, and management.',\n      duration: '2 years',\n      tuitionFee: '$30,000 per year',\n      requirements: 'Bachelor degree with 2+ years work experience',\n      image: 'https://images.unsplash.com/photo-1454165804606-c3d57bc86b40',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveCoursesDatabase();\n}\n\n// Courses Service\nconst CoursesService = {\n  // Get all courses\n  getAllCourses: async () => {\n    return coursesDatabase;\n  },\n\n  // Get course by id\n  getCourseById: async (id) => {\n    const course = coursesDatabase.find(item => item._id === id);\n    if (!course) {\n      throw new Error('Course not found');\n    }\n    return course;\n  },\n\n  // Create course\n  createCourse: async (courseData) => {\n    const newCourse = {\n      _id: 'course-' + Date.now(),\n      ...courseData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    coursesDatabase.push(newCourse);\n    saveCoursesDatabase();\n    toast.success('Course created successfully');\n    return newCourse;\n  },\n\n  // Update course\n  updateCourse: async (id, courseData) => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    \n    const updatedCourse = {\n      ...coursesDatabase[index],\n      ...courseData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    coursesDatabase[index] = updatedCourse;\n    saveCoursesDatabase();\n    toast.success('Course updated successfully');\n    return updatedCourse;\n  },\n\n  // Delete course\n  deleteCourse: async (id) => {\n    const index = coursesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Course not found');\n    }\n    \n    coursesDatabase.splice(index, 1);\n    saveCoursesDatabase();\n    toast.success('Course deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== SERVICES SERVICE ====================\n// Mock database for storing services\nlet servicesDatabase = JSON.parse(localStorage.getItem('servicesDatabase')) || [];\n\n// Save the services database to localStorage\nconst saveServicesDatabase = () => {\n  localStorage.setItem('servicesDatabase', JSON.stringify(servicesDatabase));\n};\n\n// Initialize with some data if empty\nif (servicesDatabase.length === 0) {\n  servicesDatabase = [\n    {\n      _id: 'service-1',\n      title: 'University Admissions',\n      description: 'We help students navigate the complex university application process and secure admissions to top institutions worldwide.',\n      icon: 'graduation-cap',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'service-2',\n      title: 'Visa Assistance',\n      description: 'Our expert team provides comprehensive support for student visa applications, ensuring a smooth process.',\n      icon: 'passport',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'service-3',\n      title: 'Career Counseling',\n      description: 'Personalized guidance to help students choose the right career path based on their interests and strengths.',\n      icon: 'briefcase',\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveServicesDatabase();\n}\n\n// Services Service\nconst ServicesService = {\n  // Get all services\n  getAllServices: async () => {\n    return servicesDatabase;\n  },\n\n  // Get service by id\n  getServiceById: async (id) => {\n    const service = servicesDatabase.find(item => item._id === id);\n    if (!service) {\n      throw new Error('Service not found');\n    }\n    return service;\n  },\n\n  // Create service\n  createService: async (serviceData) => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesDatabase.push(newService);\n    saveServicesDatabase();\n    toast.success('Service created successfully');\n    return newService;\n  },\n\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    \n    const updatedService = {\n      ...servicesDatabase[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesDatabase[index] = updatedService;\n    saveServicesDatabase();\n    toast.success('Service updated successfully');\n    return updatedService;\n  },\n\n  // Delete service\n  deleteService: async (id) => {\n    const index = servicesDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Service not found');\n    }\n    \n    servicesDatabase.splice(index, 1);\n    saveServicesDatabase();\n    toast.success('Service deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== TESTIMONIALS SERVICE ====================\n// Mock database for storing testimonials\nlet testimonialsDatabase = JSON.parse(localStorage.getItem('testimonialsDatabase')) || [];\n\n// Save the testimonials database to localStorage\nconst saveTestimonialsDatabase = () => {\n  localStorage.setItem('testimonialsDatabase', JSON.stringify(testimonialsDatabase));\n};\n\n// Initialize with some data if empty\nif (testimonialsDatabase.length === 0) {\n  testimonialsDatabase = [\n    {\n      _id: 'testimonial-1',\n      name: 'John Smith',\n      university: 'Harvard University',\n      text: 'GradWay helped me get into my dream university. Their guidance throughout the application process was invaluable.',\n      image: 'https://randomuser.me/api/portraits/men/32.jpg',\n      rating: 5,\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'testimonial-2',\n      name: 'Sarah Johnson',\n      university: 'Oxford University',\n      text: 'I couldnt have navigated the complex visa process without GradWays expert assistance. Highly recommended!',\n      image: 'https://randomuser.me/api/portraits/women/44.jpg',\n      rating: 5,\n      featured: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveTestimonialsDatabase();\n}\n\n// Testimonials Service\nconst TestimonialsService = {\n  // Get all testimonials\n  getAllTestimonials: async () => {\n    return testimonialsDatabase;\n  },\n\n  // Get testimonial by id\n  getTestimonialById: async (id) => {\n    const testimonial = testimonialsDatabase.find(item => item._id === id);\n    if (!testimonial) {\n      throw new Error('Testimonial not found');\n    }\n    return testimonial;\n  },\n\n  // Create testimonial\n  createTestimonial: async (testimonialData) => {\n    const newTestimonial = {\n      _id: 'testimonial-' + Date.now(),\n      ...testimonialData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    testimonialsDatabase.push(newTestimonial);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial created successfully');\n    return newTestimonial;\n  },\n\n  // Update testimonial\n  updateTestimonial: async (id, testimonialData) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    \n    const updatedTestimonial = {\n      ...testimonialsDatabase[index],\n      ...testimonialData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    testimonialsDatabase[index] = updatedTestimonial;\n    saveTestimonialsDatabase();\n    toast.success('Testimonial updated successfully');\n    return updatedTestimonial;\n  },\n\n  // Delete testimonial\n  deleteTestimonial: async (id) => {\n    const index = testimonialsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Testimonial not found');\n    }\n    \n    testimonialsDatabase.splice(index, 1);\n    saveTestimonialsDatabase();\n    toast.success('Testimonial deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== CONTACTS SERVICE ====================\n// Mock database for storing contacts\nlet contactsDatabase = JSON.parse(localStorage.getItem('contactsDatabase')) || [];\n\n// Save the contacts database to localStorage\nconst saveContactsDatabase = () => {\n  localStorage.setItem('contactsDatabase', JSON.stringify(contactsDatabase));\n};\n\n// Initialize with some data if empty\nif (contactsDatabase.length === 0) {\n  contactsDatabase = [\n    {\n      _id: 'contact-1',\n      name: 'Michael Brown',\n      email: 'michael.brown@example.com',\n      phone: '+1 (555) 123-4567',\n      message: 'I am interested in studying computer science in the UK. Can you provide information about top universities?',\n      status: 'new',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'contact-2',\n      name: 'Emma Wilson',\n      email: 'emma.wilson@example.com',\n      phone: '+1 (555) 987-6543',\n      message: 'Looking for assistance with my visa application for studying in Australia.',\n      status: 'in-progress',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveContactsDatabase();\n}\n\n// Contacts Service\nconst ContactsService = {\n  // Get all contacts\n  getAllContacts: async () => {\n    return contactsDatabase;\n  },\n\n  // Get contact by id\n  getContactById: async (id) => {\n    const contact = contactsDatabase.find(item => item._id === id);\n    if (!contact) {\n      throw new Error('Contact not found');\n    }\n    return contact;\n  },\n\n  // Create contact\n  createContact: async (contactData) => {\n    const newContact = {\n      _id: 'contact-' + Date.now(),\n      status: 'new',\n      ...contactData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    contactsDatabase.push(newContact);\n    saveContactsDatabase();\n    toast.success('Contact created successfully');\n    return newContact;\n  },\n\n  // Update contact\n  updateContact: async (id, contactData) => {\n    const index = contactsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Contact not found');\n    }\n    \n    const updatedContact = {\n      ...contactsDatabase[index],\n      ...contactData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    contactsDatabase[index] = updatedContact;\n    saveContactsDatabase();\n    toast.success('Contact updated successfully');\n    return updatedContact;\n  },\n\n  // Delete contact\n  deleteContact: async (id) => {\n    const index = contactsDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Contact not found');\n    }\n    \n    contactsDatabase.splice(index, 1);\n    saveContactsDatabase();\n    toast.success('Contact deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== BLOG SERVICE ====================\n// Mock database for storing blog posts\nlet blogDatabase = JSON.parse(localStorage.getItem('blogDatabase')) || [];\n\n// Save the blog database to localStorage\nconst saveBlogDatabase = () => {\n  localStorage.setItem('blogDatabase', JSON.stringify(blogDatabase));\n};\n\n// Initialize with some data if empty\nif (blogDatabase.length === 0) {\n  blogDatabase = [\n    {\n      _id: 'blog-1',\n      title: 'Top 10 Universities for Computer Science',\n      slug: 'top-10-universities-computer-science',\n      excerpt: 'Discover the best universities worldwide for studying computer science and technology.',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl.',\n      author: 'Admin',\n      image: 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97',\n      categories: ['Universities', 'Computer Science'],\n      tags: ['education', 'technology', 'universities'],\n      status: 'published',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'blog-2',\n      title: 'Student Visa Guide 2025',\n      slug: 'student-visa-guide-2025',\n      excerpt: 'Everything you need to know about student visa applications for popular study destinations.',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl. Nullam auctor, nisl eget ultricies aliquam, nunc nisl aliquet nunc, eget aliquam nisl nunc eget nisl.',\n      author: 'Admin',\n      image: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n      categories: ['Visa', 'Study Abroad'],\n      tags: ['visa', 'international students', 'study abroad'],\n      status: 'published',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveBlogDatabase();\n}\n\n// Blog Service\nconst BlogService = {\n  // Get all blog posts\n  getAllPosts: async () => {\n    return blogDatabase;\n  },\n\n  // Get blog post by id\n  getPostById: async (id) => {\n    const post = blogDatabase.find(item => item._id === id);\n    if (!post) {\n      throw new Error('Blog post not found');\n    }\n    return post;\n  },\n\n  // Get blog post by slug\n  getPostBySlug: async (slug) => {\n    const post = blogDatabase.find(item => item.slug === slug);\n    if (!post) {\n      throw new Error('Blog post not found');\n    }\n    return post;\n  },\n\n  // Create blog post\n  createPost: async (postData) => {\n    const newPost = {\n      _id: 'blog-' + Date.now(),\n      status: 'draft',\n      ...postData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    blogDatabase.push(newPost);\n    saveBlogDatabase();\n    toast.success('Blog post created successfully');\n    return newPost;\n  },\n\n  // Update blog post\n  updatePost: async (id, postData) => {\n    const index = blogDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Blog post not found');\n    }\n    \n    const updatedPost = {\n      ...blogDatabase[index],\n      ...postData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    blogDatabase[index] = updatedPost;\n    saveBlogDatabase();\n    toast.success('Blog post updated successfully');\n    return updatedPost;\n  },\n\n  // Delete blog post\n  deletePost: async (id) => {\n    const index = blogDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Blog post not found');\n    }\n    \n    blogDatabase.splice(index, 1);\n    saveBlogDatabase();\n    toast.success('Blog post deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== TEAM SERVICE ====================\n// Mock database for storing team members\nlet teamDatabase = JSON.parse(localStorage.getItem('teamDatabase')) || [];\n\n// Save the team database to localStorage\nconst saveTeamDatabase = () => {\n  localStorage.setItem('teamDatabase', JSON.stringify(teamDatabase));\n};\n\n// Initialize with some data if empty\nif (teamDatabase.length === 0) {\n  teamDatabase = [\n    {\n      _id: 'team-1',\n      name: 'Dr. James Wilson',\n      position: 'Education Consultant',\n      bio: 'Dr. Wilson has over 15 years of experience in international education and has helped hundreds of students achieve their academic goals.',\n      image: 'https://randomuser.me/api/portraits/men/41.jpg',\n      email: 'james.wilson@gradway.com',\n      socialMedia: {\n        linkedin: 'https://linkedin.com/in/jameswilson',\n        twitter: 'https://twitter.com/jameswilson'\n      },\n      order: 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'team-2',\n      name: 'Lisa Thompson',\n      position: 'Visa Specialist',\n      bio: 'Lisa specializes in student visa applications and has a 98% success rate in securing visas for our clients.',\n      image: 'https://randomuser.me/api/portraits/women/63.jpg',\n      email: 'lisa.thompson@gradway.com',\n      socialMedia: {\n        linkedin: 'https://linkedin.com/in/lisathompson'\n      },\n      order: 2,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveTeamDatabase();\n}\n\n// Team Service\nconst TeamService = {\n  // Get all team members\n  getAllMembers: async () => {\n    return teamDatabase;\n  },\n\n  // Get team member by id\n  getMemberById: async (id) => {\n    const member = teamDatabase.find(item => item._id === id);\n    if (!member) {\n      throw new Error('Team member not found');\n    }\n    return member;\n  },\n\n  // Create team member\n  createMember: async (memberData) => {\n    const newMember = {\n      _id: 'team-' + Date.now(),\n      order: teamDatabase.length + 1,\n      ...memberData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    teamDatabase.push(newMember);\n    saveTeamDatabase();\n    toast.success('Team member created successfully');\n    return newMember;\n  },\n\n  // Update team member\n  updateMember: async (id, memberData) => {\n    const index = teamDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Team member not found');\n    }\n    \n    const updatedMember = {\n      ...teamDatabase[index],\n      ...memberData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    teamDatabase[index] = updatedMember;\n    saveTeamDatabase();\n    toast.success('Team member updated successfully');\n    return updatedMember;\n  },\n\n  // Delete team member\n  deleteMember: async (id) => {\n    const index = teamDatabase.findIndex(item => item._id === id);\n    if (index === -1) {\n      throw new Error('Team member not found');\n    }\n    \n    teamDatabase.splice(index, 1);\n    saveTeamDatabase();\n    toast.success('Team member deleted successfully');\n    return { success: true };\n  }\n};\n\n// ==================== HERO SERVICE ====================\n// Mock database for storing hero sections\nlet heroDatabase = JSON.parse(localStorage.getItem('heroDatabase')) || null;\n\n// Save the hero database to localStorage\nconst saveHeroDatabase = () => {\n  localStorage.setItem('heroDatabase', JSON.stringify(heroDatabase));\n};\n\n// Initialize with some data if empty\nif (!heroDatabase) {\n  heroDatabase = {\n    _id: 'hero-1',\n    title: 'Your Path to Academic Success',\n    subtitle: 'Expert guidance for international education',\n    description: 'We help students achieve their academic dreams through personalized guidance and support.',\n    buttonText: 'Get Started',\n    buttonLink: '/contact',\n    backgroundImage: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveHeroDatabase();\n}\n\n// Hero Service\nconst HeroService = {\n  // Get hero section\n  getHero: async () => {\n    return heroDatabase;\n  },\n\n  // Update hero section\n  updateHero: async (heroData) => {\n    heroDatabase = {\n      ...heroDatabase,\n      ...heroData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveHeroDatabase();\n    toast.success('Hero section updated successfully');\n    return heroDatabase;\n  }\n};\n\n// Export all services\n// ==================== ABOUT SECTION SERVICE ====================\n// Mock database for storing about section\nlet aboutDatabase = JSON.parse(localStorage.getItem('aboutDatabase')) || null;\n\n// Save the about database to localStorage\nconst saveAboutDatabase = () => {\n  localStorage.setItem('aboutDatabase', JSON.stringify(aboutDatabase));\n};\n\n// Initialize with some data if empty\nif (!aboutDatabase) {\n  aboutDatabase = {\n    _id: 'about-1',\n    title: 'About GradWay',\n    description1: 'We are a team of dedicated education consultants with years of experience in helping students achieve their academic dreams. Our mission is to provide personalized guidance and support throughout your educational journey.',\n    description2: 'With a proven track record of successful placements and satisfied students, we take pride in our comprehensive approach to education consulting. We understand that each student is unique, and we tailor our services to meet your specific needs and goals.',\n    image: 'https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3',\n    yearsExperience: 10,\n    learnMoreButtonText: 'Learn More About Us',\n    learnMoreButtonLink: '/about',\n    contactButtonText: 'Contact Us',\n    contactButtonLink: '/contact',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveAboutDatabase();\n}\n\n// About Service\nconst AboutService = {\n  // Get about section\n  getAbout: async () => {\n    return aboutDatabase;\n  },\n\n  // Update about section\n  updateAbout: async (aboutData) => {\n    aboutDatabase = {\n      ...aboutDatabase,\n      ...aboutData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveAboutDatabase();\n    toast.success('About section updated successfully');\n    return aboutDatabase;\n  }\n};\n\n// ==================== COUNTRIES SERVICE ====================\n// Mock database for storing countries\nlet countriesDatabase = JSON.parse(localStorage.getItem('countriesDatabase')) || [];\n\n// Save the countries database to localStorage\nconst saveCountriesDatabase = () => {\n  localStorage.setItem('countriesDatabase', JSON.stringify(countriesDatabase));\n};\n\n// Initialize with some data if empty\nif (countriesDatabase.length === 0) {\n  countriesDatabase = [\n    {\n      _id: 'country-' + Date.now(),\n      name: \"United Kingdom\",\n      description: \"World-class education in historic institutions\",\n      image: \"https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?ixlib=rb-4.0.3\",\n      flag: \"🇬🇧\",\n      order: 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'country-' + (Date.now() + 1),\n      name: \"United States\",\n      description: \"Innovation and diverse academic opportunities\",\n      image: \"https://images.unsplash.com/photo-1501466044931-62695aada8e9?ixlib=rb-4.0.3\",\n      flag: \"🇺🇸\",\n      order: 2,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'country-' + (Date.now() + 2),\n      name: \"Canada\",\n      description: \"High quality education in a multicultural environment\",\n      image: \"https://images.unsplash.com/photo-1503614472-8c93d56e92ce?ixlib=rb-4.0.3\",\n      flag: \"🇨🇦\",\n      order: 3,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      _id: 'country-' + (Date.now() + 3),\n      name: \"Australia\",\n      description: \"Excellence in education with great lifestyle\",\n      image: \"https://images.unsplash.com/photo-1523482580672-f109ba8cb9be?ixlib=rb-4.0.3\",\n      flag: \"🇦🇺\",\n      order: 4,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ];\n  saveCountriesDatabase();\n}\n\n// Countries Service\nconst CountriesService = {\n  // Get all countries\n  getCountries: async () => {\n    return countriesDatabase;\n  },\n\n  // Get country by ID\n  getCountryById: async (id) => {\n    return countriesDatabase.find(country => country._id === id);\n  },\n\n  // Add new country\n  addCountry: async (countryData) => {\n    const newCountry = {\n      _id: 'country-' + Date.now(),\n      ...countryData,\n      order: countriesDatabase.length + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    countriesDatabase.push(newCountry);\n    saveCountriesDatabase();\n    toast.success('Country added successfully');\n    return newCountry;\n  },\n\n  // Update country\n  updateCountry: async (id, countryData) => {\n    const index = countriesDatabase.findIndex(country => country._id === id);\n    \n    if (index === -1) {\n      toast.error('Country not found');\n      return null;\n    }\n    \n    countriesDatabase[index] = {\n      ...countriesDatabase[index],\n      ...countryData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveCountriesDatabase();\n    toast.success('Country updated successfully');\n    return countriesDatabase[index];\n  },\n\n  // Delete country\n  deleteCountry: async (id) => {\n    const initialLength = countriesDatabase.length;\n    countriesDatabase = countriesDatabase.filter(country => country._id !== id);\n    \n    if (countriesDatabase.length === initialLength) {\n      toast.error('Country not found');\n      return false;\n    }\n    \n    // Reorder remaining countries\n    countriesDatabase = countriesDatabase.map((country, index) => ({\n      ...country,\n      order: index + 1\n    }));\n    \n    saveCountriesDatabase();\n    toast.success('Country deleted successfully');\n    return true;\n  },\n\n  // Reorder countries\n  reorderCountries: async (orderedIds) => {\n    // Update order based on the provided array of IDs\n    orderedIds.forEach((id, index) => {\n      const countryIndex = countriesDatabase.findIndex(country => country._id === id);\n      if (countryIndex !== -1) {\n        countriesDatabase[countryIndex].order = index + 1;\n      }\n    });\n    \n    // Sort the array by the new order\n    countriesDatabase.sort((a, b) => a.order - b.order);\n    \n    saveCountriesDatabase();\n    toast.success('Countries reordered successfully');\n    return countriesDatabase;\n  }\n};\n\n// ==================== SERVICES PAGE SERVICE ====================\n// Mock database for storing services page data\nlet servicesPageDatabase = JSON.parse(localStorage.getItem('servicesPageDatabase'));\n\n// Save the services page database to localStorage\nconst saveServicesPageDatabase = () => {\n  localStorage.setItem('servicesPageDatabase', JSON.stringify(servicesPageDatabase));\n};\n\n// Initialize with some data if empty\nif (!servicesPageDatabase) {\n  servicesPageDatabase = {\n    services: [\n      {\n        _id: 'service-1',\n        id: \"study-abroad\",\n        iconName: \"FaGraduationCap\",\n        title: \"Study Abroad Consultation\",\n        description: \"Expert guidance on choosing the right country, university, and program for your academic goals.\",\n        features: [\n          \"Country and university selection\",\n          \"Program matching based on your profile\",\n          \"Scholarship and funding guidance\",\n          \"Cultural adaptation support\"\n        ],\n        order: 1,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        _id: 'service-2',\n        id: \"visa\",\n        iconName: \"FaPassport\",\n        title: \"Visa Application Guidance\",\n        description: \"Comprehensive support for visa applications, documentation, and interview preparation.\",\n        features: [\n          \"Document checklist and preparation\",\n          \"Application form assistance\",\n          \"Interview preparation\",\n          \"Post-approval guidance\"\n        ],\n        order: 2,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        _id: 'service-3',\n        id: \"admission\",\n        iconName: \"FaUniversity\",\n        title: \"University Admission Support\",\n        description: \"Personalized assistance with university applications, essays, and admission requirements.\",\n        features: [\n          \"Application strategy development\",\n          \"Personal statement review\",\n          \"Recommendation letter guidance\",\n          \"Portfolio preparation\"\n        ],\n        order: 3,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        _id: 'service-4',\n        id: \"language\",\n        iconName: \"FaLanguage\",\n        title: \"Language Training\",\n        description: \"Specialized language courses to help you meet the language requirements of your chosen program.\",\n        features: [\n          \"IELTS/TOEFL preparation\",\n          \"Academic writing skills\",\n          \"Speaking and listening practice\",\n          \"Test-taking strategies\"\n        ],\n        order: 4,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }\n    ],\n    hero: {\n      title: \"Our Services\",\n      description: \"Comprehensive support for your educational journey, from initial consultation to successful admission.\"\n    },\n    process: {\n      title: \"Our Process\",\n      description: \"We follow a structured approach to ensure your success at every step.\",\n      steps: [\n        { number: 1, title: \"Initial Consultation\", description: \"Understanding your goals and requirements\" },\n        { number: 2, title: \"Profile Assessment\", description: \"Evaluating your academic background and preferences\" },\n        { number: 3, title: \"Application Support\", description: \"Guiding you through the application process\" },\n        { number: 4, title: \"Post-Admission\", description: \"Supporting your transition to university life\" }\n      ]\n    },\n    cta: {\n      title: \"Ready to Start Your Journey?\",\n      description: \"Contact us today to learn more about our services and how we can help you achieve your academic goals.\",\n      buttonText: \"Get in Touch\",\n      buttonLink: \"/contact\"\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveServicesPageDatabase();\n}\n\n// Services Page Service\nconst ServicesPageService = {\n  // Get services page data\n  getServicesPage: async () => {\n    return servicesPageDatabase;\n  },\n\n  // Update hero section\n  updateHero: async (heroData) => {\n    servicesPageDatabase.hero = {\n      ...servicesPageDatabase.hero,\n      ...heroData\n    };\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Hero section updated successfully');\n    return servicesPageDatabase.hero;\n  },\n\n  // Update process section\n  updateProcess: async (processData) => {\n    servicesPageDatabase.process = {\n      ...servicesPageDatabase.process,\n      ...processData\n    };\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Process section updated successfully');\n    return servicesPageDatabase.process;\n  },\n\n  // Update CTA section\n  updateCta: async (ctaData) => {\n    servicesPageDatabase.cta = {\n      ...servicesPageDatabase.cta,\n      ...ctaData\n    };\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('CTA section updated successfully');\n    return servicesPageDatabase.cta;\n  },\n\n  // Get all services\n  getServices: async () => {\n    return servicesPageDatabase.services;\n  },\n\n  // Get service by ID\n  getServiceById: async (id) => {\n    return servicesPageDatabase.services.find(service => service._id === id);\n  },\n\n  // Add new service\n  addService: async (serviceData) => {\n    const newService = {\n      _id: 'service-' + Date.now(),\n      ...serviceData,\n      order: servicesPageDatabase.services.length + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesPageDatabase.services.push(newService);\n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Service added successfully');\n    return newService;\n  },\n\n  // Update service\n  updateService: async (id, serviceData) => {\n    const index = servicesPageDatabase.services.findIndex(service => service._id === id);\n    \n    if (index === -1) {\n      toast.error('Service not found');\n      return null;\n    }\n    \n    servicesPageDatabase.services[index] = {\n      ...servicesPageDatabase.services[index],\n      ...serviceData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Service updated successfully');\n    return servicesPageDatabase.services[index];\n  },\n\n  // Delete service\n  deleteService: async (id) => {\n    const initialLength = servicesPageDatabase.services.length;\n    servicesPageDatabase.services = servicesPageDatabase.services.filter(service => service._id !== id);\n    \n    if (servicesPageDatabase.services.length === initialLength) {\n      toast.error('Service not found');\n      return false;\n    }\n    \n    // Reorder remaining services\n    servicesPageDatabase.services = servicesPageDatabase.services.map((service, index) => ({\n      ...service,\n      order: index + 1\n    }));\n    \n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Service deleted successfully');\n    return true;\n  },\n\n  // Reorder services\n  reorderServices: async (orderedIds) => {\n    // Update order based on the provided array of IDs\n    orderedIds.forEach((id, index) => {\n      const serviceIndex = servicesPageDatabase.services.findIndex(service => service._id === id);\n      if (serviceIndex !== -1) {\n        servicesPageDatabase.services[serviceIndex].order = index + 1;\n      }\n    });\n    \n    // Sort the array by the new order\n    servicesPageDatabase.services.sort((a, b) => a.order - b.order);\n    \n    servicesPageDatabase.updatedAt = new Date().toISOString();\n    saveServicesPageDatabase();\n    toast.success('Services reordered successfully');\n    return servicesPageDatabase.services;\n  }\n};\n\n// ==================== ABOUT PAGE SERVICE ====================\n// Mock database for storing about page data\nlet aboutPageDatabase = JSON.parse(localStorage.getItem('aboutPageDatabase'));\n\n// Save the about page database to localStorage\nconst saveAboutPageDatabase = () => {\n  localStorage.setItem('aboutPageDatabase', JSON.stringify(aboutPageDatabase));\n};\n\n// Initialize with some data if empty\nif (!aboutPageDatabase) {\n  aboutPageDatabase = {\n    hero: {\n      title: \"About GradWay\",\n      description: \"We are dedicated to helping students achieve their academic dreams through personalized guidance and expert support.\"\n    },\n    mission: {\n      title: \"Our Mission\",\n      description1: \"To provide comprehensive educational consulting services that empower students to achieve their academic goals and unlock their full potential.\",\n      description2: \"We believe in personalized guidance, transparent processes, and unwavering support throughout every student's educational journey.\"\n    },\n    vision: {\n      title: \"Our Vision\",\n      description1: \"To be the leading educational consultancy, recognized for our commitment to excellence and student success.\",\n      description2: \"We envision a world where every student has access to quality education and the support they need to succeed.\"\n    },\n    team: {\n      title: \"Meet Our Team\",\n      description: \"Our team of experienced professionals is dedicated to helping you achieve your academic goals.\"\n    },\n    cta: {\n      title: \"Ready to Start Your Journey?\",\n      description: \"Contact us today to learn how we can help you achieve your academic goals.\",\n      buttonText: \"Get in Touch\",\n      buttonLink: \"/contact\"\n    },\n    teamMembers: [\n      {\n        _id: 'team-1',\n        name: \"Dr. Sarah Williams\",\n        role: \"Founder & CEO\",\n        image: \"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3\",\n        bio: \"With over 15 years of experience in education consulting, Sarah founded GradWay to help students achieve their academic dreams.\",\n        order: 1,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        _id: 'team-2',\n        name: \"Michael Chen\",\n        role: \"Admissions Specialist\",\n        image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3\",\n        bio: \"Michael specializes in university admissions and has helped hundreds of students secure spots in top universities worldwide.\",\n        order: 2,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        _id: 'team-3',\n        name: \"Emma Wilson\",\n        role: \"Visa Consultant\",\n        image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3\",\n        bio: \"Emma's expertise in visa applications and immigration processes ensures smooth transitions for our students.\",\n        order: 3,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }\n    ],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveAboutPageDatabase();\n}\n\n// About Page Service\nconst AboutPageService = {\n  // Get about page data\n  getAboutPage: async () => {\n    return aboutPageDatabase;\n  },\n\n  // Update hero section\n  updateHero: async (heroData) => {\n    aboutPageDatabase.hero = {\n      ...aboutPageDatabase.hero,\n      ...heroData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Hero section updated successfully');\n    return aboutPageDatabase.hero;\n  },\n\n  // Update mission section\n  updateMission: async (missionData) => {\n    aboutPageDatabase.mission = {\n      ...aboutPageDatabase.mission,\n      ...missionData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Mission section updated successfully');\n    return aboutPageDatabase.mission;\n  },\n\n  // Update vision section\n  updateVision: async (visionData) => {\n    aboutPageDatabase.vision = {\n      ...aboutPageDatabase.vision,\n      ...visionData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Vision section updated successfully');\n    return aboutPageDatabase.vision;\n  },\n\n  // Update team section\n  updateTeamSection: async (teamData) => {\n    aboutPageDatabase.team = {\n      ...aboutPageDatabase.team,\n      ...teamData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team section updated successfully');\n    return aboutPageDatabase.team;\n  },\n\n  // Update CTA section\n  updateCta: async (ctaData) => {\n    aboutPageDatabase.cta = {\n      ...aboutPageDatabase.cta,\n      ...ctaData\n    };\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('CTA section updated successfully');\n    return aboutPageDatabase.cta;\n  },\n\n  // Get all team members\n  getTeamMembers: async () => {\n    return aboutPageDatabase.teamMembers;\n  },\n\n  // Get team member by ID\n  getTeamMemberById: async (id) => {\n    return aboutPageDatabase.teamMembers.find(member => member._id === id);\n  },\n\n  // Add new team member\n  addTeamMember: async (memberData) => {\n    const newMember = {\n      _id: 'team-' + Date.now(),\n      ...memberData,\n      order: aboutPageDatabase.teamMembers.length + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    aboutPageDatabase.teamMembers.push(newMember);\n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team member added successfully');\n    return newMember;\n  },\n\n  // Update team member\n  updateTeamMember: async (id, memberData) => {\n    const index = aboutPageDatabase.teamMembers.findIndex(member => member._id === id);\n    \n    if (index === -1) {\n      toast.error('Team member not found');\n      return null;\n    }\n    \n    aboutPageDatabase.teamMembers[index] = {\n      ...aboutPageDatabase.teamMembers[index],\n      ...memberData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team member updated successfully');\n    return aboutPageDatabase.teamMembers[index];\n  },\n\n  // Delete team member\n  deleteTeamMember: async (id) => {\n    const initialLength = aboutPageDatabase.teamMembers.length;\n    aboutPageDatabase.teamMembers = aboutPageDatabase.teamMembers.filter(member => member._id !== id);\n    \n    if (aboutPageDatabase.teamMembers.length === initialLength) {\n      toast.error('Team member not found');\n      return false;\n    }\n    \n    // Reorder remaining team members\n    aboutPageDatabase.teamMembers = aboutPageDatabase.teamMembers.map((member, index) => ({\n      ...member,\n      order: index + 1\n    }));\n    \n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team member deleted successfully');\n    return true;\n  },\n\n  // Reorder team members\n  reorderTeamMembers: async (orderedIds) => {\n    // Update order based on the provided array of IDs\n    orderedIds.forEach((id, index) => {\n      const memberIndex = aboutPageDatabase.teamMembers.findIndex(member => member._id === id);\n      if (memberIndex !== -1) {\n        aboutPageDatabase.teamMembers[memberIndex].order = index + 1;\n      }\n    });\n    \n    // Sort the array by the new order\n    aboutPageDatabase.teamMembers.sort((a, b) => a.order - b.order);\n    \n    aboutPageDatabase.updatedAt = new Date().toISOString();\n    saveAboutPageDatabase();\n    toast.success('Team members reordered successfully');\n    return aboutPageDatabase.teamMembers;\n  }\n};\n\n// ==================== CONTACT PAGE SERVICE ====================\n// Mock database for storing contact page data\nlet contactPageDatabase = JSON.parse(localStorage.getItem('contactPageDatabase'));\n\n// Save the contact page database to localStorage\nconst saveContactPageDatabase = () => {\n  localStorage.setItem('contactPageDatabase', JSON.stringify(contactPageDatabase));\n};\n\n// Initialize with some data if empty\nif (!contactPageDatabase) {\n  contactPageDatabase = {\n    hero: {\n      title: \"Contact Us\",\n      description: \"Get in touch with our team for personalized guidance and support.\"\n    },\n    contactInfo: {\n      phone: {\n        title: \"Phone\",\n        value: \"+1 (234) 567-890\"\n      },\n      email: {\n        title: \"Email\",\n        value: \"info@gradway.com\"\n      },\n      hours: {\n        title: \"Working Hours\",\n        value: \"Mon-Fri: 9am-6pm\"\n      }\n    },\n    form: {\n      title: \"Send us a Message\"\n    },\n    location: {\n      title: \"Our Location\",\n      address: {\n        title: \"Office Address\",\n        line1: \"123 Education Street\",\n        line2: \"Academic City, AC 12345\",\n        line3: \"United States\"\n      },\n      mapEmbedUrl: \"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3022.2155710122!2d-73.987844924164!3d40.75733997132258!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c25855c6480299%3A0x55194ec5a1ae072e!2sTimes%20Square!5e0!3m2!1sen!2sus!4v1681234567890!5m2!1sen!2sus\"\n    },\n    services: [\n      {\n        value: \"study-abroad\",\n        label: \"Study Abroad Consultation\"\n      },\n      {\n        value: \"visa\",\n        label: \"Visa Application Guidance\"\n      },\n      {\n        value: \"admission\",\n        label: \"University Admission Support\"\n      },\n      {\n        value: \"language\",\n        label: \"Language Training\"\n      }\n    ],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  saveContactPageDatabase();\n}\n\n// Contact Page Service\nconst ContactPageService = {\n  // Get contact page data\n  getContactPage: async () => {\n    return contactPageDatabase;\n  },\n\n  // Update hero section\n  updateHero: async (heroData) => {\n    contactPageDatabase.hero = {\n      ...contactPageDatabase.hero,\n      ...heroData\n    };\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Hero section updated successfully');\n    return contactPageDatabase.hero;\n  },\n\n  // Update contact info\n  updateContactInfo: async (contactInfoData) => {\n    contactPageDatabase.contactInfo = {\n      ...contactPageDatabase.contactInfo,\n      ...contactInfoData\n    };\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Contact information updated successfully');\n    return contactPageDatabase.contactInfo;\n  },\n\n  // Update location info\n  updateLocation: async (locationData) => {\n    contactPageDatabase.location = {\n      ...contactPageDatabase.location,\n      ...locationData\n    };\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Location information updated successfully');\n    return contactPageDatabase.location;\n  },\n\n  // Get all services\n  getServices: async () => {\n    return contactPageDatabase.services;\n  },\n\n  // Add new service\n  addService: async (serviceData) => {\n    const newService = {\n      value: serviceData.value.toLowerCase().replace(/\\s+/g, '-'),\n      label: serviceData.label,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    contactPageDatabase.services.push(newService);\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Service added successfully');\n    return newService;\n  },\n\n  // Update service\n  updateService: async (index, serviceData) => {\n    if (index < 0 || index >= contactPageDatabase.services.length) {\n      toast.error('Service not found');\n      return null;\n    }\n    \n    contactPageDatabase.services[index] = {\n      ...contactPageDatabase.services[index],\n      value: serviceData.value.toLowerCase().replace(/\\s+/g, '-'),\n      label: serviceData.label,\n      updatedAt: new Date().toISOString()\n    };\n    \n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Service updated successfully');\n    return contactPageDatabase.services[index];\n  },\n\n  // Delete service\n  deleteService: async (index) => {\n    if (index < 0 || index >= contactPageDatabase.services.length) {\n      toast.error('Service not found');\n      return false;\n    }\n    \n    contactPageDatabase.services.splice(index, 1);\n    contactPageDatabase.updatedAt = new Date().toISOString();\n    saveContactPageDatabase();\n    toast.success('Service deleted successfully');\n    return true;\n  }\n};\n\n// ==================== FOOTER SERVICE ====================\n// Mock database for storing footer data\nlet footerDatabase = JSON.parse(localStorage.getItem('footerDatabase'));\n\n// Save the footer database to localStorage\nconst saveFooterDatabase = () => {\n  localStorage.setItem('footerDatabase', JSON.stringify(footerDatabase));\n};\n\n// Initialize with default data if empty\nif (!footerDatabase) {\n  footerDatabase = {\n    companyInfo: {\n      name: 'GradWay',\n      description: 'Your trusted partner in academic success. We provide expert guidance and support for your educational journey.',\n      socialLinks: [\n        { platform: 'facebook', url: 'https://facebook.com' },\n        { platform: 'twitter', url: 'https://twitter.com' },\n        { platform: 'instagram', url: 'https://instagram.com' },\n        { platform: 'linkedin', url: 'https://linkedin.com' }\n      ]\n    },\n    quickLinks: [\n      { name: 'Home', url: '/' },\n      { name: 'About Us', url: '/about' },\n      { name: 'Services', url: '/services' },\n      { name: 'Blog', url: '/blog' },\n      { name: 'Contact', url: '/contact' }\n    ],\n    services: [\n      { name: 'Study Abroad Consultation', url: '/services#study-abroad' },\n      { name: 'Visa Application Guidance', url: '/services#visa' },\n      { name: 'University Admission Support', url: '/services#admission' },\n      { name: 'Language Training', url: '/services#language' }\n    ],\n    contactInfo: {\n      address: '123 Education Street, Academic City, AC 12345',\n      phone: '+1 (234) 567-890',\n      email: 'info@gradway.com'\n    },\n    copyright: '© {year} GradWay. All rights reserved.'\n  };\n  saveFooterDatabase();\n}\n\n// Footer Service\nconst FooterService = {\n  // Get footer data\n  getFooterData: async () => {\n    return footerDatabase;\n  },\n  \n  // Update company info\n  updateCompanyInfo: async (companyInfo) => {\n    footerDatabase.companyInfo = {\n      ...footerDatabase.companyInfo,\n      ...companyInfo\n    };\n    saveFooterDatabase();\n    toast.success('Company information updated successfully');\n    return footerDatabase.companyInfo;\n  },\n  \n  // Update social links\n  updateSocialLinks: async (socialLinks) => {\n    footerDatabase.companyInfo.socialLinks = socialLinks;\n    saveFooterDatabase();\n    toast.success('Social links updated successfully');\n    return footerDatabase.companyInfo.socialLinks;\n  },\n  \n  // Update quick links\n  updateQuickLinks: async (quickLinks) => {\n    footerDatabase.quickLinks = quickLinks;\n    saveFooterDatabase();\n    toast.success('Quick links updated successfully');\n    return footerDatabase.quickLinks;\n  },\n  \n  // Update services\n  updateServices: async (services) => {\n    footerDatabase.services = services;\n    saveFooterDatabase();\n    toast.success('Services updated successfully');\n    return footerDatabase.services;\n  },\n  \n  // Update contact info\n  updateContactInfo: async (contactInfo) => {\n    footerDatabase.contactInfo = {\n      ...footerDatabase.contactInfo,\n      ...contactInfo\n    };\n    saveFooterDatabase();\n    toast.success('Contact information updated successfully');\n    return footerDatabase.contactInfo;\n  },\n  \n  // Update copyright\n  updateCopyright: async (copyright) => {\n    footerDatabase.copyright = copyright;\n    saveFooterDatabase();\n    toast.success('Copyright updated successfully');\n    return footerDatabase.copyright;\n  }\n};\n\nexport {\n  ContentService,\n  CoursesService,\n  ServicesService,\n  TestimonialsService,\n  ContactsService,\n  BlogService,\n  TeamService,\n  HeroService,\n  AboutService,\n  CountriesService,\n  ServicesPageService,\n  AboutPageService,\n  ContactPageService,\n  FooterService\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}