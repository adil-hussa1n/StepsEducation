{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL ? `${process.env.REACT_APP_API_URL}/content` : 'http://localhost:5000/api/content';\nconst handleError = error => {\n  if (error.response) {\n    throw new Error(error.response.data.message || 'Server error');\n  } else if (error.request) {\n    throw new Error('Could not connect to server. Please check if the server is running.');\n  } else {\n    throw new Error('Error setting up the request');\n  }\n};\nconst getAuthConfig = token => ({\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n});\n\n// Get all content with filters\nexport const getAllContent = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams(filters);\n    const response = await axios.get(`${API_URL}?${params}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Get content by slug\nexport const getContentBySlug = async slug => {\n  try {\n    const response = await axios.get(`${API_URL}/${slug}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Create content (admin only)\nexport const createContent = async (contentData, token) => {\n  try {\n    const response = await axios.post(API_URL, contentData, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Update content (admin only)\nexport const updateContent = async (contentId, contentData, token) => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.put(`${API_URL}/${contentId}`, contentData, config);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Delete content (admin only)\nexport const deleteContent = async (contentId, token) => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.delete(`${API_URL}/${contentId}`, config);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nconst contentService = {\n  getAllContent,\n  getContentByPage,\n  createContent,\n  updateContent,\n  deleteContent\n};\nexport default contentService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","handleError","error","response","Error","data","message","request","getAuthConfig","token","headers","Authorization","getAllContent","filters","params","URLSearchParams","get","getContentBySlug","slug","createContent","contentData","post","updateContent","contentId","config","put","deleteContent","delete","contentService","getContentByPage"],"sources":["X:/gradway/frontend/src/services/contentService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL ? `${process.env.REACT_APP_API_URL}/content` : 'http://localhost:5000/api/content';\n\nconst handleError = (error) => {\n  if (error.response) {\n    throw new Error(error.response.data.message || 'Server error');\n  } else if (error.request) {\n    throw new Error('Could not connect to server. Please check if the server is running.');\n  } else {\n    throw new Error('Error setting up the request');\n  }\n};\n\nconst getAuthConfig = (token) => ({\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n});\n\n// Get all content with filters\nexport const getAllContent = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams(filters);\n    const response = await axios.get(`${API_URL}?${params}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Get content by slug\nexport const getContentBySlug = async (slug) => {\n  try {\n    const response = await axios.get(`${API_URL}/${slug}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Create content (admin only)\nexport const createContent = async (contentData, token) => {\n  try {\n    const response = await axios.post(API_URL, contentData, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Update content (admin only)\nexport const updateContent = async (contentId, contentData, token) => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const response = await axios.put(`${API_URL}/${contentId}`, contentData, config);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Delete content (admin only)\nexport const deleteContent = async (contentId, token) => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const response = await axios.delete(`${API_URL}/${contentId}`, config);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nconst contentService = {\n  getAllContent,\n  getContentByPage,\n  createContent,\n  updateContent,\n  deleteContent,\n};\n\nexport default contentService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}