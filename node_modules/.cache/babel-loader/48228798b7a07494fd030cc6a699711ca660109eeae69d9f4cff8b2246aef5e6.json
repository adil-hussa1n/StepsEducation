{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL ? `${process.env.REACT_APP_API_URL}/content` : 'http://localhost:5000/api/content';\nconst handleError = error => {\n  if (error.response) {\n    throw new Error(error.response.data.message || 'Server error');\n  } else if (error.request) {\n    throw new Error('Could not connect to server. Please check if the server is running.');\n  } else {\n    throw new Error('Error setting up the request');\n  }\n};\nconst getAuthConfig = token => ({\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n});\n\n// Get all content with filters\nexport const getAllContent = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams(filters);\n    const response = await axios.get(`${API_URL}?${params}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Get content by slug\nexport const getContentBySlug = async slug => {\n  try {\n    // For 'home' slug, check if we have hero data in localStorage first\n    if (slug === 'home') {\n      // Try to construct content from localStorage data\n      const heroData = JSON.parse(localStorage.getItem('heroDatabase'));\n      if (heroData) {\n        // Format the hero data to match the expected content structure\n        return {\n          slug: 'home',\n          page: 'home',\n          title: 'Welcome to GradWay',\n          description: 'Your path to academic success',\n          sections: [{\n            name: 'hero',\n            title: 'Hero Section',\n            order: 0,\n            fields: [{\n              name: 'title',\n              type: 'text',\n              value: heroData.title,\n              label: 'Title'\n            }, {\n              name: 'subtitle',\n              type: 'text',\n              value: heroData.subtitle,\n              label: 'Subtitle'\n            }, {\n              name: 'description',\n              type: 'text',\n              value: heroData.description,\n              label: 'Description'\n            }, {\n              name: 'backgroundImage',\n              type: 'text',\n              value: heroData.backgroundImage,\n              label: 'Background Image'\n            }]\n          }]\n        };\n      }\n    }\n\n    // If we don't have localStorage data or it's not the home page, fetch from API\n    const response = await axios.get(`${API_URL}/${slug}`);\n    return response.data;\n  } catch (error) {\n    // If API call fails, check if we can return mock data for home page\n    if (slug === 'home') {\n      const contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n      const homeContent = contentDatabase.find(item => item.slug === 'home');\n      if (homeContent) return homeContent;\n    }\n    handleError(error);\n  }\n};\n\n// Create content (admin only)\nexport const createContent = async (contentData, token) => {\n  try {\n    const response = await axios.post(API_URL, contentData, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Update content (admin only)\nexport const updateContent = async (contentId, contentData, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/${contentId}`, contentData, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Delete content (admin only)\nexport const deleteContent = async (contentId, token) => {\n  try {\n    const response = await axios.delete(`${API_URL}/${contentId}`, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Update content section (admin only)\nexport const updateContentSection = async (contentId, sectionName, sectionData, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/${contentId}/sections/${sectionName}`, sectionData, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Add item to repeatable section (admin only)\nexport const addSectionItem = async (contentId, sectionName, itemData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/${contentId}/sections/${sectionName}/items`, itemData, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Upload file (admin only)\nexport const uploadFile = async (file, token) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await axios.post(`${API_URL}/upload`, formData, {\n      ...getAuthConfig(token),\n      headers: {\n        ...getAuthConfig(token).headers,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nconst contentService = {\n  getAllContent,\n  getContentBySlug,\n  createContent,\n  updateContent,\n  deleteContent,\n  updateContentSection,\n  addSectionItem,\n  uploadFile\n};\nexport default contentService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","handleError","error","response","Error","data","message","request","getAuthConfig","token","headers","Authorization","getAllContent","filters","params","URLSearchParams","get","getContentBySlug","slug","heroData","JSON","parse","localStorage","getItem","page","title","description","sections","name","order","fields","type","value","label","subtitle","backgroundImage","contentDatabase","homeContent","find","item","createContent","contentData","post","updateContent","contentId","put","deleteContent","delete","updateContentSection","sectionName","sectionData","addSectionItem","itemData","uploadFile","file","formData","FormData","append","contentService"],"sources":["X:/gradway/frontend/src/services/contentService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL ? `${process.env.REACT_APP_API_URL}/content` : 'http://localhost:5000/api/content';\n\nconst handleError = (error) => {\n  if (error.response) {\n    throw new Error(error.response.data.message || 'Server error');\n  } else if (error.request) {\n    throw new Error('Could not connect to server. Please check if the server is running.');\n  } else {\n    throw new Error('Error setting up the request');\n  }\n};\n\nconst getAuthConfig = (token) => ({\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n});\n\n// Get all content with filters\nexport const getAllContent = async (filters = {}) => {\n  try {\n    const params = new URLSearchParams(filters);\n    const response = await axios.get(`${API_URL}?${params}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Get content by slug\nexport const getContentBySlug = async (slug) => {\n  try {\n    // For 'home' slug, check if we have hero data in localStorage first\n    if (slug === 'home') {\n      // Try to construct content from localStorage data\n      const heroData = JSON.parse(localStorage.getItem('heroDatabase'));\n      \n      if (heroData) {\n        // Format the hero data to match the expected content structure\n        return {\n          slug: 'home',\n          page: 'home',\n          title: 'Welcome to GradWay',\n          description: 'Your path to academic success',\n          sections: [\n            {\n              name: 'hero',\n              title: 'Hero Section',\n              order: 0,\n              fields: [\n                {\n                  name: 'title',\n                  type: 'text',\n                  value: heroData.title,\n                  label: 'Title'\n                },\n                {\n                  name: 'subtitle',\n                  type: 'text',\n                  value: heroData.subtitle,\n                  label: 'Subtitle'\n                },\n                {\n                  name: 'description',\n                  type: 'text',\n                  value: heroData.description,\n                  label: 'Description'\n                },\n                {\n                  name: 'backgroundImage',\n                  type: 'text',\n                  value: heroData.backgroundImage,\n                  label: 'Background Image'\n                }\n              ]\n            }\n          ]\n        };\n      }\n    }\n    \n    // If we don't have localStorage data or it's not the home page, fetch from API\n    const response = await axios.get(`${API_URL}/${slug}`);\n    return response.data;\n  } catch (error) {\n    // If API call fails, check if we can return mock data for home page\n    if (slug === 'home') {\n      const contentDatabase = JSON.parse(localStorage.getItem('contentDatabase')) || [];\n      const homeContent = contentDatabase.find(item => item.slug === 'home');\n      if (homeContent) return homeContent;\n    }\n    handleError(error);\n  }\n};\n\n// Create content (admin only)\nexport const createContent = async (contentData, token) => {\n  try {\n    const response = await axios.post(API_URL, contentData, getAuthConfig(token));\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Update content (admin only)\nexport const updateContent = async (contentId, contentData, token) => {\n  try {\n    const response = await axios.put(\n      `${API_URL}/${contentId}`,\n      contentData,\n      getAuthConfig(token)\n    );\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Delete content (admin only)\nexport const deleteContent = async (contentId, token) => {\n  try {\n    const response = await axios.delete(\n      `${API_URL}/${contentId}`,\n      getAuthConfig(token)\n    );\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Update content section (admin only)\nexport const updateContentSection = async (contentId, sectionName, sectionData, token) => {\n  try {\n    const response = await axios.put(\n      `${API_URL}/${contentId}/sections/${sectionName}`,\n      sectionData,\n      getAuthConfig(token)\n    );\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Add item to repeatable section (admin only)\nexport const addSectionItem = async (contentId, sectionName, itemData, token) => {\n  try {\n    const response = await axios.post(\n      `${API_URL}/${contentId}/sections/${sectionName}/items`,\n      itemData,\n      getAuthConfig(token)\n    );\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Upload file (admin only)\nexport const uploadFile = async (file, token) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await axios.post(\n      `${API_URL}/upload`,\n      formData,\n      {\n        ...getAuthConfig(token),\n        headers: {\n          ...getAuthConfig(token).headers,\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\nconst contentService = {\n  getAllContent,\n  getContentBySlug,\n  createContent,\n  updateContent,\n  deleteContent,\n  updateContentSection,\n  addSectionItem,\n  uploadFile,\n};\n\nexport default contentService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}