{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/content';\nconst handleError = error => {\n  if (error.response) {\n    // Server responded with an error\n    throw new Error(error.response.data.message || 'Server error');\n  } else if (error.request) {\n    // No response received\n    throw new Error('Could not connect to server. Please check if the server is running.');\n  } else {\n    // Error in request setup\n    throw new Error('Error setting up the request');\n  }\n};\n\n// Get all content\nexport const getAllContent = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Get content by page\nexport const getContentByPage = async page => {\n  try {\n    const response = await axios.get(`${API_URL}/${page}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Create content (admin only)\nexport const createContent = async (contentData, token) => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.post(API_URL, contentData, config);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Update content (admin only)\nexport const updateContent = async (contentId, contentData, token) => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.put(`${API_URL}/${contentId}`, contentData, config);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n// Delete content (admin only)\nexport const deleteContent = async (contentId, token) => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.delete(`${API_URL}/${contentId}`, config);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n  }\n};\nconst contentService = {\n  getAllContent,\n  getContentByPage,\n  createContent,\n  updateContent,\n  deleteContent\n};\nexport default contentService;","map":{"version":3,"names":["axios","API_URL","handleError","error","response","Error","data","message","request","getAllContent","get","getContentByPage","page","createContent","contentData","token","config","headers","Authorization","post","updateContent","contentId","put","deleteContent","delete","contentService"],"sources":["X:/gradway/frontend/src/services/contentService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/content';\r\n\r\nconst handleError = (error) => {\r\n  if (error.response) {\r\n    // Server responded with an error\r\n    throw new Error(error.response.data.message || 'Server error');\r\n  } else if (error.request) {\r\n    // No response received\r\n    throw new Error('Could not connect to server. Please check if the server is running.');\r\n  } else {\r\n    // Error in request setup\r\n    throw new Error('Error setting up the request');\r\n  }\r\n};\r\n\r\n// Get all content\r\nexport const getAllContent = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// Get content by page\r\nexport const getContentByPage = async (page) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/${page}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// Create content (admin only)\r\nexport const createContent = async (contentData, token) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const response = await axios.post(API_URL, contentData, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// Update content (admin only)\r\nexport const updateContent = async (contentId, contentData, token) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const response = await axios.put(`${API_URL}/${contentId}`, contentData, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\n// Delete content (admin only)\r\nexport const deleteContent = async (contentId, token) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const response = await axios.delete(`${API_URL}/${contentId}`, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\nconst contentService = {\r\n  getAllContent,\r\n  getContentByPage,\r\n  createContent,\r\n  updateContent,\r\n  deleteContent,\r\n};\r\n\r\nexport default contentService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}