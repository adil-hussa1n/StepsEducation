{"ast":null,"code":"var _jsxFileName = \"X:\\\\redu\\\\gradway\\\\frontend\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// Create a custom hook for consuming the theme context\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return {\n    isDarkMode: context.darkMode,\n    toggleTheme: context.toggleTheme\n  };\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    // Check if user has a preferred theme stored\n    const savedTheme = localStorage.getItem('darkMode');\n    if (savedTheme !== null) {\n      setDarkMode(JSON.parse(savedTheme));\n    } else {\n      // Check if user prefers dark mode at system level\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setDarkMode(prefersDark);\n      localStorage.setItem('darkMode', JSON.stringify(prefersDark));\n    }\n  }, []);\n  const toggleTheme = () => {\n    const newMode = !darkMode;\n    setDarkMode(newMode);\n    localStorage.setItem('darkMode', JSON.stringify(newMode));\n\n    // Apply dark mode class to the document\n    if (newMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  // Apply the initial dark mode class\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"jxWvogfm97D9w3+yMzVp/epPJCw=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","undefined","Error","isDarkMode","darkMode","toggleTheme","ThemeProvider","children","_s2","setDarkMode","savedTheme","localStorage","getItem","JSON","parse","prefersDark","window","matchMedia","matches","setItem","stringify","newMode","document","documentElement","classList","add","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["X:/redu/gradway/frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\n// Create a custom hook for consuming the theme context\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return {\r\n    isDarkMode: context.darkMode,\r\n    toggleTheme: context.toggleTheme\r\n  };\r\n};\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if user has a preferred theme stored\r\n    const savedTheme = localStorage.getItem('darkMode');\r\n    \r\n    if (savedTheme !== null) {\r\n      setDarkMode(JSON.parse(savedTheme));\r\n    } else {\r\n      // Check if user prefers dark mode at system level\r\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      setDarkMode(prefersDark);\r\n      localStorage.setItem('darkMode', JSON.stringify(prefersDark));\r\n    }\r\n  }, []);\r\n\r\n  const toggleTheme = () => {\r\n    const newMode = !darkMode;\r\n    setDarkMode(newMode);\r\n    localStorage.setItem('darkMode', JSON.stringify(newMode));\r\n    \r\n    // Apply dark mode class to the document\r\n    if (newMode) {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  };\r\n\r\n  // Apply the initial dark mode class\r\n  useEffect(() => {\r\n    if (darkMode) {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeProvider; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGR,UAAU,CAACK,YAAY,CAAC;EACxC,IAAIG,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAO;IACLC,UAAU,EAAEH,OAAO,CAACI,QAAQ;IAC5BC,WAAW,EAAEL,OAAO,CAACK;EACvB,CAAC;AACH,CAAC;AAACN,EAAA,CATWD,QAAQ;AAWrB,OAAO,MAAMQ,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACJ,QAAQ,EAAEK,WAAW,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEnD,IAAIF,UAAU,KAAK,IAAI,EAAE;MACvBD,WAAW,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACrC,CAAC,MAAM;MACL;MACA,MAAMK,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MAC7ET,WAAW,CAACM,WAAW,CAAC;MACxBJ,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAEN,IAAI,CAACO,SAAS,CAACL,WAAW,CAAC,CAAC;IAC/D;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMV,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMgB,OAAO,GAAG,CAACjB,QAAQ;IACzBK,WAAW,CAACY,OAAO,CAAC;IACpBV,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAEN,IAAI,CAACO,SAAS,CAACC,OAAO,CAAC,CAAC;;IAEzD;IACA,IAAIA,OAAO,EAAE;MACXC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC;;EAED;EACAhC,SAAS,CAAC,MAAM;IACd,IAAIU,QAAQ,EAAE;MACZkB,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACtB,QAAQ,CAAC,CAAC;EAEd,oBACER,OAAA,CAACC,YAAY,CAAC8B,QAAQ;IAACC,KAAK,EAAE;MAAExB,QAAQ;MAAEC;IAAY,CAAE;IAAAE,QAAA,EACrDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACxB,GAAA,CA5CWF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AA8C1B,eAAeA,aAAa;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}